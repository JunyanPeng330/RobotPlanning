import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline

# [1,1,6]
best_epi1 = [0, 2, 20, 31, 43, 53, 60, 64, 65, 66, 81, 86, 87, 91, 92, 175, 184, 187, 193, 195, 325, 355, 680]
best_step1 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 171, 181, 104, 87, 86, 89, 83, 83, 82, 83, 82, 82]
fsbl_epi1 = [86, 87, 89, 90, 91, 92, 93, 94, 96, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 136, 138, 139, 141, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
fsbl_step1 = [171, 181, 188, 190, 104, 87, 86, 96, 104, 171, 102, 98, 96, 89, 95, 93, 90, 94, 92, 91, 91, 94, 95, 98, 98, 107, 106, 95, 105, 97, 104, 97, 107, 108, 99, 104, 100, 101, 98, 96, 95, 98, 96, 94, 90, 94, 94, 97, 93, 97, 96, 95, 92, 93, 96, 99, 104, 99, 95, 96, 98, 103, 95, 104, 99, 96, 89, 102, 105, 94, 87, 106, 106, 86, 89, 87, 94, 93, 90, 94, 94, 93, 89, 97, 90, 83, 89, 83, 94, 91, 82, 83, 83, 82, 82, 84, 82, 81, 82, 83, 83, 82, 83, 81, 82, 88, 82, 83, 82, 82, 83, 84, 83, 84, 88, 84, 85, 84, 85, 86, 90, 83, 85, 87, 84, 92, 94, 100, 102, 167, 88, 81, 82, 81, 82, 91, 89, 92, 91, 93, 96, 92, 102, 90, 86, 88, 83, 89, 85, 89, 89, 82, 91, 88, 83, 82, 83, 99, 93, 93, 81, 90, 108, 82, 82, 81, 81, 81, 81, 81, 82, 82, 81, 82, 81, 82, 81, 82, 82, 82, 81, 81, 82, 81, 82, 82, 82, 82, 82, 82, 81, 82, 81, 83, 83, 82, 83, 82, 82, 82, 84, 82, 82, 83, 83, 83, 84, 82, 84, 152, 83, 83, 83, 83, 83, 84, 83, 84, 83, 84, 84, 83, 83, 83, 83, 84, 83, 84, 84, 85, 84, 84, 86, 83, 83, 83, 84, 84, 84, 84, 84, 85, 84, 84, 83, 83, 84, 83, 83, 83, 83, 83, 82, 83, 84, 83, 83, 83, 83, 84, 84, 83, 83, 83, 82, 83, 81, 83, 83, 82, 84, 85, 83, 84, 83, 83, 82, 83, 83, 84, 83, 83, 84, 83, 83, 83, 83, 83, 82, 83, 83, 83, 83, 83, 82, 82, 82, 82, 82, 81, 82, 81, 82, 81, 82, 82, 82, 82, 81, 147, 82, 153, 82, 82, 82, 82, 82, 82, 83, 152, 94, 82, 82, 83, 84, 83, 84, 84, 87, 86, 81, 85, 85, 82, 83, 85, 84, 82, 82, 82, 82, 84, 83, 85, 83, 83, 82, 83, 83, 83, 82, 82, 82, 84, 83, 84, 83, 83, 82, 83, 83, 82, 83, 82, 83, 83, 103, 102, 85, 83, 83, 83, 84, 84, 85, 82, 84, 84, 85, 84, 85, 84, 84, 84, 87, 84, 85, 85, 85, 87, 83, 83, 84, 83, 84, 87, 92, 88, 84, 85, 86, 89, 85, 83, 87, 88, 84, 84, 85, 86, 85, 85, 84, 85, 85, 86, 85, 85, 87, 86, 84, 86, 87, 88, 85, 89, 85, 85, 84, 85, 85, 84, 83, 84, 84, 83, 83, 85, 83, 82, 83, 84, 83, 84, 83, 84, 83, 83, 81, 85, 82, 82, 83, 82, 83, 82, 82, 82, 82, 84, 83, 84, 82, 83, 82, 83, 82, 82, 84, 83, 81, 86, 85, 82, 81, 82, 81, 82, 84, 82, 82, 82, 82, 82, 82, 82, 85, 82, 93, 84, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 81, 82, 81, 82, 81, 82, 81, 81, 83, 83, 83, 82, 82, 83, 83, 86, 83, 85, 83, 83, 89, 87, 87, 86, 87, 88, 88, 88, 87, 88, 87, 88, 84, 87, 87, 86, 85, 89, 87, 87, 85, 85, 86, 85, 84, 83, 105, 84, 83, 83, 85, 82, 83, 84, 83, 122, 82, 84, 83, 82, 83, 82, 83, 82, 83, 83, 84, 83, 84, 83, 84, 83, 83, 84, 83, 82, 83, 83, 82, 82, 82, 82, 82, 83, 81, 82, 84, 81, 81, 83, 103, 82, 83, 82, 83]

td_best_epi1 = [0, 2, 40, 49, 61, 62, 104, 105, 106, 189, 216, 224, 225, 230, 267, 269, 279, 284, 287, 333, 336, 337, 370, 373, 375, 377, 387, 416, 487]
td_best_step1 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 152, 155, 87, 87, 85, 86, 84, 85, 86, 85, 84, 85, 85, 86, 84, 84, 84, 84, 83, 82]
td_fsbl_epi1 = [189, 216, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 262, 263, 266, 267, 268, 269, 270, 272, 273, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 575, 578, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
td_fsbl_step1 = [152, 155, 87, 87, 87, 84, 85, 87, 86, 86, 87, 86, 90, 87, 89, 89, 95, 90, 88, 93, 93, 87, 86, 89, 84, 86, 85, 87, 167, 85, 85, 86, 86, 86, 86, 86, 85, 85, 85, 85, 87, 85, 85, 86, 86, 85, 85, 85, 85, 87, 86, 88, 87, 103, 89, 88, 87, 88, 88, 87, 87, 87, 87, 84, 86, 85, 87, 86, 84, 85, 84, 84, 83, 83, 85, 84, 85, 84, 84, 85, 85, 85, 86, 85, 162, 86, 86, 86, 85, 85, 84, 85, 85, 86, 85, 86, 85, 86, 86, 87, 89, 99, 94, 90, 103, 97, 88, 86, 85, 88, 88, 88, 86, 86, 87, 84, 85, 84, 84, 84, 102, 92, 85, 83, 84, 84, 84, 116, 86, 84, 84, 85, 85, 84, 83, 103, 85, 84, 85, 84, 85, 86, 85, 84, 85, 85, 84, 84, 84, 152, 84, 87, 85, 105, 102, 102, 85, 83, 83, 83, 94, 83, 102, 85, 86, 83, 84, 83, 83, 84, 84, 83, 83, 83, 83, 83, 84, 84, 83, 83, 84, 104, 85, 84, 83, 83, 84, 86, 83, 87, 85, 111, 141, 155, 133, 129, 117, 111, 94, 93, 89, 88, 85, 89, 85, 84, 88, 94, 86, 85, 86, 88, 111, 84, 85, 85, 84, 84, 84, 84, 83, 85, 84, 91, 83, 82, 88, 90, 83, 84, 87, 83, 86, 84, 91, 94, 95, 102, 88, 84, 87, 87, 86, 87, 87, 87, 86, 89, 87, 88, 90, 87, 90, 89, 89, 89, 87, 89, 90, 89, 89, 88, 150, 90, 90, 88, 87, 88, 90, 89, 89, 89, 90, 89, 89, 90, 89, 88, 91, 91, 92, 90, 92, 89, 91, 90, 96, 90, 90, 92, 93, 95, 96, 95, 96, 97, 94, 96, 98, 95, 94, 93, 95, 94, 93, 93, 129, 110, 96, 102, 156, 104, 137, 104, 101, 88, 91, 104, 88, 89, 92, 87, 88, 91, 89, 89, 87, 88, 88, 87, 90, 92, 91, 90, 86, 97, 91, 91, 86, 95, 89, 92, 89, 91, 90, 91, 91, 176, 90, 89, 89, 91, 92, 172, 91, 94, 91, 90, 113, 103, 94, 90, 88, 100, 90, 90, 94, 91, 95, 91, 91, 182, 90, 186, 162, 96, 187, 90, 172, 173, 171, 104, 185, 99, 95, 96, 96, 98, 100, 94, 97, 96, 103, 99, 123, 102, 105, 152, 104, 94, 100, 95]

pure_best_epi1 = [0, 2, 4, 14, 20, 27, 51, 54, 59, 67, 79, 84, 115, 119, 125, 128, 129, 131, 132, 133, 171, 192, 225, 227, 301, 307, 310, 311, 382, 390]
pure_best_step1 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 147, 91, 92, 85, 83, 82, 83, 82, 81, 81, 81]
pure_fsbl_epi1 = [133, 143, 169, 171, 172, 173, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 296, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 317, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696]
pure_fsbl_step1 = [147, 135, 138, 91, 99, 107, 94, 95, 100, 122, 159, 106, 164, 115, 98, 100, 92, 96, 92, 93, 94, 88, 99, 94, 126, 90, 93, 92, 92, 94, 96, 105, 110, 100, 109, 95, 95, 105, 85, 87, 83, 90, 103, 88, 89, 97, 90, 88, 112, 91, 102, 99, 103, 107, 94, 91, 89, 99, 102, 88, 90, 88, 93, 94, 104, 93, 104, 102, 87, 102, 103, 89, 92, 89, 94, 101, 86, 102, 85, 96, 89, 97, 85, 97, 86, 83, 153, 151, 164, 145, 152, 152, 172, 194, 188, 161, 151, 82, 149, 159, 172, 82, 83, 87, 84, 82, 81, 188, 82, 84, 153, 104, 159, 84, 84, 104, 83, 89, 130, 93, 90, 90, 93, 85, 84, 83, 83, 83, 83, 137, 137, 83, 84, 108, 153, 104, 85, 174, 137, 125, 140, 136, 147, 121, 152, 161, 153, 124, 142, 156, 141, 181, 81, 179, 142, 119, 118, 105, 103, 96, 129, 83, 81, 81, 81, 81, 81, 82, 82, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 81, 81, 81, 82, 82, 82, 82, 82, 82, 83, 82, 83, 81, 81, 82, 82, 82, 83, 82, 83, 82, 82, 83, 84, 82, 83, 84, 84, 83, 82, 83, 83, 82, 82, 102, 83, 83, 103, 86, 90, 99, 111, 104, 95, 105, 102, 93, 84, 81, 107, 94, 103, 109, 94, 87, 115, 81, 82, 81, 81, 153, 83, 82, 102, 81, 82, 82, 82, 83, 82, 82, 83, 83, 84, 82, 83, 84, 83, 83, 87, 108, 84, 82, 82, 86, 82, 83, 102, 83, 84, 84, 85, 84, 84, 85, 82, 88, 83, 82, 84, 103, 82, 82, 81, 82, 82, 83, 82, 81, 82, 81, 81, 82, 81, 81, 81, 82, 82, 81, 81, 82, 81, 81, 81, 83, 82, 83, 83, 83, 83, 82, 83, 83, 83, 82, 82, 82, 82, 82, 81, 82, 82, 81, 82, 82, 81, 82, 82, 82, 82, 83, 82, 82, 82, 82, 81, 83, 82, 81, 81, 81, 81, 82, 81, 81, 81, 81, 81, 81, 81, 81, 82, 81, 81, 81, 81, 80, 81, 82, 81, 81, 82, 82, 83, 82, 82, 84, 83, 82, 81, 82, 82, 82, 81, 83, 81, 81, 82, 82, 83, 83, 82, 81, 82, 82, 82, 87, 82, 82, 82, 82, 83, 83, 82, 82, 83, 89, 102, 128, 127, 103, 82, 82, 82, 83, 82, 83, 82, 82, 83, 82, 82, 82, 83, 81, 93, 82, 82, 82, 82, 82, 82, 84, 82, 83, 82, 83, 83, 137, 84, 83, 182, 83, 82, 82, 83, 82, 125, 159, 81, 82, 81, 81, 81, 82, 81, 81, 82, 81, 82]
plt.plot(best_epi1, best_step1, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF best solution')
plt.plot(td_best_epi1, td_best_step1, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF best solution')
plt.plot(pure_best_epi1, pure_best_step1, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG best solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title1 = 'instance(1) best solution'
plt.title(title1)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[1,1,6] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi1, fsbl_step1, color='coral', linewidth=1, label='DDPG_APF feasible solution')
plt.plot(td_fsbl_epi1, td_fsbl_step1, color='limegreen', linewidth=1, label='TD3_APF feasible solution')
plt.plot(pure_fsbl_epi1, pure_fsbl_step1, color='darkgray', linewidth=1, label='pure DDPG feasible solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'instance(1) feasible solutions'
plt.title(title11)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[1,1,6] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl1 = len(fsbl_epi1)
t_num_fsbl1 = len(td_fsbl_epi1)
p_num_fsbl1 = len(pure_fsbl_epi1)

# [1,4,5]
best_epi2 = [0, 2, 4, 14, 28, 34, 99, 100, 101, 102, 103, 108, 109, 110, 111, 113, 114, 124, 134, 138, 141, 144, 145, 146, 151, 160, 162, 166, 170, 184, 185, 187, 192, 206, 225, 227, 234, 235, 236, 239, 248, 254, 282, 356, 359, 379, 389, 404, 405, 417, 500, 505, 508]
best_step2 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 77, 72, 72, 73, 76, 74, 76, 77, 75, 73, 72, 71, 73, 72, 72, 71, 73, 72, 71, 72, 71, 71, 71, 71, 71, 71, 72]
fsbl_epi2 = [162, 165, 166, 170, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 192, 195, 196, 197, 198, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
fsbl_step2 = [77, 79, 72, 72, 76, 153, 79, 118, 73, 119, 110, 73, 76, 131, 74, 74, 76, 139, 127, 139, 133, 137, 76, 152, 76, 77, 144, 143, 129, 122, 81, 124, 76, 78, 77, 77, 79, 77, 113, 78, 78, 122, 78, 77, 75, 125, 73, 73, 112, 75, 72, 73, 72, 71, 73, 73, 73, 72, 73, 73, 72, 72, 72, 72, 141, 72, 72, 71, 71, 71, 71, 72, 71, 72, 72, 72, 72, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 71, 72, 72, 72, 72, 72, 72, 73, 72, 73, 74, 74, 73, 74, 74, 74, 73, 76, 75, 74, 74, 73, 79, 74, 73, 73, 73, 74, 73, 72, 73, 73, 72, 73, 72, 71, 71, 72, 76, 72, 72, 72, 72, 72, 72, 72, 72, 71, 72, 73, 72, 74, 73, 73, 71, 72, 72, 72, 73, 72, 72, 73, 72, 72, 83, 72, 72, 72, 74, 72, 72, 72, 71, 72, 72, 72, 71, 72, 72, 71, 71, 72, 71, 72, 71, 72, 72, 71, 72, 71, 71, 72, 71, 71, 71, 72, 72, 72, 72, 72, 73, 71, 72, 73, 72, 71, 74, 74, 72, 72, 72, 71, 72, 72, 71, 71, 76, 72, 71, 72, 71, 71, 72, 72, 72, 71, 71, 71, 72, 71, 71, 71, 71, 72, 71, 71, 71, 71, 72, 71, 72, 72, 71, 71, 71, 71, 72, 71, 71, 73, 72, 72, 72, 72, 74, 72, 75, 72, 74, 75, 74, 76, 75, 77, 80, 74, 74, 74, 78, 76, 78, 170, 84, 82, 83, 86, 85, 82, 77, 75, 77, 72, 72, 72, 72, 73, 72, 72, 72, 72, 72, 72, 71, 71, 72, 72, 71, 72, 72, 71, 72, 72, 72, 72, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 72, 72, 72, 71, 72, 72, 76, 74, 74, 75, 76, 74, 74, 73, 73, 73, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 71, 71, 74, 72, 74, 73, 75, 73, 71, 72, 73, 72, 75, 75, 72, 75, 73, 71, 72, 71, 72, 71, 71, 71, 72, 72, 71, 72, 72, 71, 72, 72, 72, 72, 72, 71, 71, 73, 72, 72, 72, 72, 72, 72, 73, 73, 72, 72, 72, 73, 72, 72, 72, 78, 73, 75, 73, 71, 72, 73, 73, 71, 71, 71, 71, 71, 71, 70, 71, 71, 71, 70, 72, 72, 71, 73, 71, 71, 71, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 72, 71, 72, 72, 73, 74, 72, 75, 75, 74, 74, 76, 75, 73, 71, 72, 72, 72, 72, 70, 71, 77, 76, 72, 72, 72, 76, 74, 71, 71, 83, 71, 76, 76, 71, 72, 72, 72, 73, 78, 85, 168, 105, 84, 82, 96, 80, 75, 79, 74, 76, 78, 74, 73, 74, 79, 73, 74, 75, 73]

td_best_epi2 = [0, 2, 3, 11, 102, 111, 113, 114, 115, 116, 117, 119, 123, 164, 166, 177, 178, 181, 187, 191, 193, 207, 209, 211, 213, 215, 250, 320, 323, 328, 329, 334, 346, 353, 390, 392, 409, 633, 654, 673]
td_best_step2 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 160, 200, 200, 200, 200, 200, 101, 100, 96, 98, 101, 100, 96, 92, 88, 82, 91, 92, 88, 89, 84, 77, 76, 80, 78, 79, 77, 78, 79]
td_fsbl_epi2 = [181, 186, 187, 191, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 253, 255, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
td_fsbl_step2 = [101, 106, 100, 96, 98, 103, 103, 107, 104, 106, 116, 113, 117, 116, 104, 107, 101, 100, 100, 96, 101, 92, 99, 88, 90, 95, 94, 109, 100, 102, 95, 102, 104, 106, 97, 101, 96, 96, 92, 93, 89, 88, 90, 92, 91, 90, 87, 87, 87, 82, 88, 86, 86, 91, 93, 90, 93, 94, 94, 91, 93, 94, 93, 90, 87, 95, 98, 95, 93, 88, 93, 100, 91, 96, 89, 87, 93, 89, 87, 88, 86, 88, 87, 87, 89, 85, 85, 86, 92, 92, 92, 93, 92, 91, 92, 92, 95, 93, 97, 96, 98, 96, 97, 93, 98, 100, 96, 94, 96, 91, 93, 90, 92, 96, 90, 92, 88, 89, 86, 89, 88, 85, 84, 87, 85, 84, 82, 85, 84, 78, 77, 81, 81, 80, 77, 82, 80, 77, 78, 77, 75, 76, 76, 76, 77, 80, 77, 79, 76, 76, 77, 79, 82, 79, 78, 76, 79, 76, 76, 77, 78, 131, 77, 76, 76, 119, 77, 78, 140, 76, 110, 80, 140, 120, 131, 122, 84, 80, 154, 78, 103, 78, 79, 78, 157, 78, 79, 80, 79, 82, 83, 104, 103, 83, 112, 79, 82, 83, 84, 83, 159, 106, 82, 104, 82, 85, 81, 81, 81, 82, 81, 84, 83, 83, 88, 86, 92, 85, 82, 83, 89, 86, 86, 88, 85, 90, 95, 91, 102, 93, 83, 85, 83, 85, 85, 85, 87, 86, 82, 82, 81, 84, 83, 87, 81, 83, 84, 82, 83, 83, 85, 81, 82, 160, 80, 80, 81, 85, 86, 82, 83, 83, 82, 82, 88, 82, 79, 87, 87, 88, 84, 86, 85, 91, 154, 94, 100, 94, 92, 90, 90, 100, 85, 83, 85, 91, 91, 89, 90, 94, 92, 91, 93, 95, 92, 98, 110, 166, 154, 169, 163, 190, 157, 102, 85, 84, 103, 103, 102, 89, 153, 83, 83, 84, 82, 88, 88, 86, 85, 86, 88, 81, 78, 82, 79, 86, 82, 83, 83, 80, 81, 83, 115, 108, 100, 88, 78, 80, 82, 86, 79, 76, 79, 79, 86, 82, 80, 83, 78, 80, 80, 79, 79, 82, 79, 79, 80, 78, 80, 76, 76, 79, 78, 76, 77, 77, 76, 79, 77, 76, 74, 76, 75, 76, 76, 77, 76, 78, 76, 78, 77, 80, 78, 80, 76, 76, 75, 77, 77, 75, 76, 77, 75, 76, 76, 77, 75, 74, 76, 74, 75, 78, 75, 75, 77, 76, 78, 78, 89, 81, 85, 77, 88, 95, 78, 105, 77, 75, 81, 77, 78, 79, 81, 103, 83, 81, 89, 82, 87, 83, 89, 82, 78, 101, 87, 79, 82, 100, 97, 99, 102, 89, 91, 89, 80, 94, 92, 89, 101, 88, 89, 79, 82, 82, 86, 96, 87, 107, 85, 86, 88, 82, 88, 88, 79, 84, 83, 80, 79, 86, 85, 85, 90, 89, 88, 81]

pure_best_epi2 = [0, 2, 4, 14, 27, 28, 34, 52, 189, 190, 193, 195, 225, 226, 231, 232, 272, 273, 286, 290, 293, 294, 303, 304, 305, 314, 315, 318, 343, 345, 351, 352, 353, 365, 369, 373, 381, 386, 389, 410, 412, 414, 418, 432, 437, 449, 450, 461, 462, 485, 488, 491, 492, 567, 578, 580, 607, 627, 673]
pure_best_step2 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 86, 76, 76, 74, 74, 72, 73, 70, 71, 72, 71, 70, 71, 70, 71, 70, 70]
pure_fsbl_epi2 = [418, 432, 437, 440, 443, 449, 450, 451, 452, 455, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 485, 488, 489, 490, 491, 492, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 639, 640, 641, 642, 643, 651, 652, 653, 654, 655, 656, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699]
pure_fsbl_step2 = [86, 76, 76, 74, 75, 74, 74, 135, 165, 73, 74, 162, 71, 72, 73, 72, 71, 71, 71, 72, 70, 71, 71, 113, 72, 71, 71, 72, 104, 71, 71, 71, 79, 103, 89, 115, 71, 72, 151, 72, 103, 72, 71, 102, 166, 71, 72, 70, 72, 71, 72, 80, 71, 71, 71, 71, 74, 75, 71, 102, 82, 71, 75, 72, 72, 71, 71, 77, 76, 70, 80, 72, 71, 74, 71, 71, 76, 71, 71, 71, 71, 71, 71, 71, 72, 71, 71, 70, 71, 71, 72, 70, 71, 71, 71, 71, 71, 83, 71, 71, 70, 71, 73, 71, 72, 71, 71, 72, 72, 72, 72, 72, 72, 72, 71, 71, 73, 73, 73, 72, 71, 71, 72, 73, 71, 72, 72, 71, 72, 71, 71, 71, 72, 71, 72, 72, 71, 71, 72, 71, 71, 71, 71, 71, 71, 71, 71, 70, 70, 71, 71, 70, 71, 71, 153, 71, 123, 72, 71, 71, 71, 132, 153, 156, 71, 73, 72, 72, 72, 72, 81, 72, 71, 72, 73, 71, 72, 71, 71, 71, 72, 70, 71, 71, 72, 71, 71, 71, 72, 71, 72, 72, 71, 71, 71, 71, 70, 72, 71, 71, 71, 71, 71, 71, 71, 71]
plt.plot(best_epi2, best_step2, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF best solution')
plt.plot(td_best_epi2, td_best_step2, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF best solution')
plt.plot(pure_best_epi2, pure_best_step2, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG best solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title1 = 'instance(2) best solution'
plt.title(title1)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[1,4,5] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi2, fsbl_step2, color='coral', linewidth=1, label='DDPG_APF feasible solution')
plt.plot(td_fsbl_epi2, td_fsbl_step2, color='limegreen', linewidth=1, label='TD3_APF feasible solution')
plt.plot(pure_fsbl_epi2, pure_fsbl_step2, color='darkgray', linewidth=1, label='pure DDPG feasible solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'instance(2) feasible solutions'
plt.title(title11)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[1,4,5] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl2 = len(fsbl_epi2)
t_num_fsbl2 = len(td_fsbl_epi2)
p_num_fsbl2 = len(pure_fsbl_epi2)

# [3,2,3]
best_epi3 = [0, 2, 14, 20, 28, 31, 34, 54, 56, 57, 64, 65, 66, 67, 69, 78, 88, 123, 125, 127, 165, 167, 176, 179, 188, 204, 206, 224, 225, 226, 241, 247, 260, 267, 289, 338, 344, 345, 361, 406, 410, 473, 477, 478, 485, 488, 513, 538, 601, 604, 606, 644, 652, 664, 665, 676]
best_step3 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 138, 144, 151, 145, 152, 145, 143, 140, 139, 128, 127, 127, 128, 129, 127, 114, 120, 116, 116, 110, 106, 103, 104, 104, 105, 104, 104, 103, 102, 103, 103, 103, 102, 105, 105, 103, 103, 103]
fsbl_epi3 = [125, 127, 129, 141, 142, 146, 147, 153, 154, 159, 160, 161, 162, 165, 167, 168, 170, 176, 178, 179, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 243, 244, 247, 252, 255, 256, 257, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 276, 277, 279, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 344, 345, 346, 349, 350, 352, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 392, 393, 398, 399, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 427, 428, 430, 431, 432, 433, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 457, 458, 459, 460, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 694, 695, 696, 697, 698, 699]
fsbl_step3 = [138, 144, 143, 143, 143, 146, 142, 160, 149, 151, 155, 168, 163, 151, 145, 150, 146, 152, 147, 145, 154, 148, 150, 144, 140, 143, 155, 162, 168, 147, 170, 174, 153, 146, 150, 145, 145, 151, 153, 151, 140, 148, 139, 142, 151, 140, 151, 177, 170, 149, 159, 151, 140, 139, 128, 127, 127, 131, 155, 147, 140, 152, 133, 153, 163, 152, 147, 155, 128, 131, 134, 129, 128, 127, 130, 132, 127, 127, 129, 126, 152, 155, 114, 153, 152, 155, 120, 139, 149, 140, 154, 151, 130, 119, 122, 120, 123, 122, 126, 126, 123, 121, 122, 124, 125, 124, 125, 123, 125, 126, 125, 124, 126, 124, 124, 125, 125, 124, 119, 117, 119, 120, 120, 121, 123, 122, 122, 124, 127, 121, 130, 119, 125, 124, 125, 127, 122, 153, 124, 124, 124, 116, 149, 121, 123, 116, 110, 120, 113, 111, 113, 117, 115, 112, 111, 110, 106, 106, 106, 106, 109, 108, 109, 111, 110, 114, 113, 110, 111, 114, 109, 121, 112, 115, 119, 119, 116, 109, 110, 110, 107, 112, 111, 104, 129, 107, 107, 107, 103, 107, 105, 106, 104, 106, 105, 104, 105, 105, 104, 104, 104, 103, 106, 106, 106, 106, 105, 105, 104, 103, 117, 105, 103, 103, 102, 104, 103, 103, 103, 103, 102, 103, 102, 103, 102, 109, 104, 115, 152, 108, 110, 110, 107, 105, 105, 105, 105, 107, 105, 105, 104, 104, 104, 104, 105, 104, 107, 106, 106, 104, 106, 103, 103, 106, 103, 104, 102, 104, 102, 102, 102, 103, 103, 103, 102, 103, 102, 103, 103, 102, 102, 103, 103, 101, 102, 102, 102, 102, 103, 102, 102, 102, 103, 103, 103, 103, 102, 103, 104, 102, 102, 103, 104, 104, 105, 103, 103, 103, 102, 103, 105, 104, 105, 104, 105, 104, 104, 103, 104, 103, 103, 106, 103, 105, 105, 104, 104, 105, 105, 103, 104, 105, 105, 105, 105, 104, 103, 108, 104, 106, 103, 104, 105, 105, 105, 108, 114, 107, 106, 104, 111, 110, 145, 105, 105, 105, 153, 154, 104, 105, 104, 130, 104, 103, 103, 103, 103, 103, 104, 102, 102, 103, 102, 103, 101, 104, 102, 103, 104, 104, 104, 104, 109, 105, 103, 106, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 105, 105, 105, 106, 105, 106, 105, 107, 104, 105, 105, 105, 105, 105, 105, 105, 104, 105, 105, 105, 104, 106, 104, 103, 103, 103, 104, 104, 104, 103, 103, 105, 103, 103, 103, 103, 103, 103, 104, 103, 103, 103, 104, 103, 102, 101, 102, 102, 101, 102, 102, 103, 104, 103, 103, 103]

td_best_epi3 = [0, 2, 3, 32, 40, 49, 52, 53, 92, 102, 312, 332, 362, 363, 435, 460, 479, 530, 578, 580, 621, 622, 636]
td_best_step3 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200]
td_fsbl_epi3 =[]
td_fsbl_step3 = []

pure_best_epi3 = [0, 2, 4, 14, 16, 28, 34, 53, 54, 55, 57, 58, 94, 105, 109, 112, 118, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 135, 139, 140, 149, 150, 152, 153, 162, 163, 170, 171, 188, 194, 197, 210, 211, 217, 219, 223, 239, 243, 294, 295, 297, 300, 327, 331, 337, 340, 349, 350, 352, 356, 365, 386, 538, 619, 626]
pure_best_step3 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 107, 106, 107, 103, 103, 102, 102, 102, 103, 103, 103, 102, 102, 102, 102, 102, 102, 102, 101, 101, 101, 101, 101, 101, 101, 101, 101, 100, 100]
pure_fsbl_epi3 = [170, 171, 187, 188, 189, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 469, 470, 471, 474, 476, 477, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 691, 692, 693, 694, 695, 696, 697, 698, 699]
pure_fsbl_step3 = [107, 106, 111, 107, 109, 152, 103, 103, 103, 104, 102, 103, 103, 104, 104, 102, 105, 105, 104, 102, 102, 103, 103, 104, 104, 104, 102, 102, 103, 101, 104, 103, 103, 104, 102, 103, 103, 104, 105, 104, 103, 104, 104, 101, 103, 103, 103, 102, 103, 103, 102, 102, 102, 102, 101, 101, 102, 101, 102, 102, 104, 102, 103, 103, 104, 105, 105, 105, 103, 103, 104, 102, 103, 102, 102, 102, 102, 103, 102, 102, 102, 101, 102, 103, 103, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 102, 102, 102, 102, 102, 103, 102, 102, 102, 102, 103, 103, 103, 104, 103, 105, 105, 106, 104, 106, 107, 106, 105, 105, 104, 103, 104, 105, 103, 103, 102, 103, 102, 103, 102, 156, 101, 102, 101, 101, 101, 102, 103, 105, 102, 102, 104, 101, 101, 102, 101, 106, 102, 102, 101, 101, 102, 102, 103, 102, 102, 103, 103, 101, 103, 110, 116, 106, 103, 101, 102, 103, 101, 101, 102, 103, 101, 101, 103, 101, 101, 101, 101, 101, 101, 101, 102, 103, 102, 102, 102, 102, 101, 102, 101, 101, 102, 103, 102, 104, 162, 108, 105, 105, 107, 102, 107, 103, 102, 102, 105, 102, 102, 103, 101, 101, 102, 102, 101, 102, 102, 103, 103, 103, 102, 102, 102, 102, 102, 102, 103, 102, 102, 104, 101, 102, 102, 102, 102, 103, 103, 102, 102, 103, 103, 104, 105, 106, 103, 106, 104, 105, 104, 104, 102, 102, 101, 103, 102, 101, 102, 102, 101, 102, 103, 103, 103, 105, 103, 102, 102, 103, 104, 104, 103, 169, 104, 105, 104, 103, 107, 105, 104, 104, 103, 106, 104, 106, 105, 104, 106, 104, 105, 103, 102, 103, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 102, 102, 102, 101, 103, 102, 102, 103, 103, 102, 102, 103, 102, 102, 102, 104, 105, 104, 103, 104, 104, 104, 103, 104, 104, 104, 104, 104, 103, 103, 103, 102, 102, 102, 103, 102, 102, 102, 102, 102, 102, 102, 103, 102, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 105, 103, 103, 104, 103, 102, 104, 102, 103, 103, 102, 103, 104, 103, 103, 102, 102, 102, 103, 102, 102, 102, 103, 102, 101, 100, 102, 102, 103, 102, 100, 101, 100, 102, 102, 101, 101, 102, 102, 102, 102, 101, 101, 101, 102, 101, 102, 101, 101, 102, 102, 101, 102, 101, 101, 101, 101, 101, 102, 100, 101, 102, 102, 101, 102, 102, 102, 102, 103, 196, 187, 157, 152, 105, 102, 105, 105, 104, 109, 142, 167, 187, 104, 102, 102, 103, 171, 149, 106, 146, 104]
plt.plot(best_epi3, best_step3, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF best solution')
plt.plot(td_best_epi3, td_best_step3, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF best solution')
plt.plot(pure_best_epi3, pure_best_step3, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG best solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title1 = 'instance(3) best solution'
plt.title(title1)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[3,2,3] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi3, fsbl_step3, color='coral', linewidth=1, label='DDPG_APF feasible solution')
plt.plot(td_fsbl_epi3, td_fsbl_step3, color='limegreen', linewidth=1, label='TD3_APF feasible solution')
plt.plot(pure_fsbl_epi3, pure_fsbl_step3, color='darkgray', linewidth=1, label='pure DDPG feasible solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'instance(3) feasible solutions'
plt.title(title11)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[3,2,3] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl3 = len(fsbl_epi3)
t_num_fsbl3 = len(td_fsbl_epi3)
p_num_fsbl3 = len(pure_fsbl_epi3)

# [3,3,1]
best_epi4 = [0, 2, 14, 28, 34, 53, 69, 71, 114, 115, 118, 119, 120, 131, 150, 155, 535]
best_step4 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 114, 108, 109]
fsbl_epi4 = [150, 154, 155, 251, 253, 256, 494, 499, 510, 535, 542]
fsbl_step4 = [114, 117, 108, 110, 109, 109, 116, 116, 159, 109, 116]

td_best_epi4 = [0, 2, 3, 11, 40, 49, 52, 53, 92, 102, 303, 322, 364]
td_best_step4 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200]
td_fsbl_epi4 =[]
td_fsbl_step4 = []

pure_best_epi4 = [0, 2, 4, 14, 28, 34, 52, 54, 58, 63, 65, 72, 77, 79, 81, 82, 84, 85, 86, 87, 88, 111, 112, 113, 114, 116, 118, 129, 130, 151, 152, 164, 165, 166, 197, 203, 226, 227, 335, 344, 349, 371, 495, 515]
pure_best_step4 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 110, 112, 107, 108, 107, 106, 105]
pure_fsbl_epi4 = [227, 335, 338, 344, 349, 350, 357, 371, 372, 375, 377, 378, 383, 384, 385, 389, 390, 391, 393, 394, 395, 398, 401, 495, 501, 502, 505, 506, 507, 508, 515, 601, 608, 610, 611, 674]
pure_fsbl_step4 = [110, 112, 112, 107, 108, 108, 111, 107, 113, 106, 115, 132, 159, 152, 122, 112, 120, 140, 114, 135, 159, 111, 118, 106, 107, 107, 106, 108, 107, 107, 105, 107, 110, 111, 108, 136]
plt.plot(best_epi4, best_step4, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF best solution')
plt.plot(td_best_epi4, td_best_step4, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF best solution')
plt.plot(pure_best_epi4, pure_best_step4, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG best solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title1 = 'instance(4) best solution'
plt.title(title1)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[3,3,1] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi4, fsbl_step4, color='coral', linewidth=1, label='DDPG_APF feasible solution')
plt.plot(td_fsbl_epi4, td_fsbl_step4, color='limegreen', linewidth=1, label='TD3_APF feasible solution')
plt.plot(pure_fsbl_epi4, pure_fsbl_step4, color='darkgray', linewidth=1, label='pure DDPG feasible solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'instance(4) feasible solutions'
plt.title(title11)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[3,3,1] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl4 = len(fsbl_epi4)
t_num_fsbl4 = len(td_fsbl_epi4)
p_num_fsbl4 = len(pure_fsbl_epi4)

# [3,3,2]
best_epi5 = [0, 2, 4, 14, 28, 34, 51, 55, 56, 58, 84, 168, 314, 322, 323, 496, 497, 607, 612]
best_step5 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 98, 101, 102, 99, 98, 99, 99, 98]
fsbl_epi5 = [168, 286, 289, 290, 298, 300, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 345, 350, 354, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 391, 392, 393, 396, 398, 400, 404, 409, 410, 411, 421, 487, 494, 496, 497, 499, 500, 503, 516, 520, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623]
fsbl_step5 = [98, 167, 132, 117, 107, 106, 100, 101, 101, 100, 103, 100, 102, 102, 102, 101, 102, 110, 100, 102, 102, 107, 102, 99, 102, 100, 98, 98, 97, 100, 98, 99, 98, 97, 98, 98, 98, 98, 98, 101, 97, 98, 98, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 101, 100, 100, 98, 98, 98, 100, 98, 109, 106, 99, 98, 99, 99, 103, 102, 103, 103, 101, 105, 102, 102, 98, 102, 102, 100, 100, 104, 100, 99, 101, 101, 98, 102, 99, 98, 100, 100, 99, 98, 99, 100, 100]

td_best_epi5 = [0, 2, 3, 11, 49, 52, 53]
td_best_step5 = [200, 200, 200, 200, 200, 200, 200]
td_fsbl_epi5 =[]
td_fsbl_step5 = []

pure_best_epi5 = [0, 2, 4, 14, 28, 34, 54, 57, 58, 72, 74, 76, 79, 80, 81, 82, 87, 89, 90, 92, 99, 100, 101, 110, 111, 113, 114, 118, 129, 131, 141, 145, 146, 149, 150, 151, 152, 154, 156, 157, 158, 160, 206, 226, 231, 233, 278, 283, 332, 335, 382, 384, 517, 539, 546, 564, 575, 585, 604]
pure_best_step5 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 117, 111, 113, 112, 109, 108, 105, 104, 103, 103, 103, 103, 103, 102, 103, 102, 101, 99]
pure_fsbl_epi5 = [160, 204, 206, 209, 213, 219, 221, 222, 223, 224, 226, 227, 231, 233, 234, 240, 241, 243, 251, 252, 253, 254, 255, 268, 269, 270, 273, 278, 279, 283, 285, 329, 330, 331, 332, 333, 334, 335, 336, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 371, 372, 375, 376, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 406, 407, 408, 410, 411, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 481, 508, 509, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 529, 530, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 585, 604, 605, 612, 615, 617, 618, 620, 622, 623, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 647, 652, 654, 656, 657, 658, 660, 664, 674, 676, 678, 679, 682, 687, 688, 697]
pure_fsbl_step5 = [117, 148, 111, 110, 159, 168, 141, 117, 124, 156, 113, 111, 112, 109, 110, 116, 109, 111, 108, 109, 109, 110, 110, 110, 157, 113, 113, 108, 110, 105, 107, 104, 105, 106, 104, 103, 104, 103, 106, 104, 104, 103, 104, 104, 105, 104, 104, 104, 105, 105, 106, 104, 106, 105, 104, 105, 105, 104, 104, 104, 104, 104, 106, 104, 103, 103, 104, 105, 106, 103, 104, 103, 103, 103, 103, 103, 104, 104, 192, 158, 108, 105, 108, 106, 105, 105, 108, 114, 116, 145, 110, 110, 110, 111, 106, 108, 117, 115, 114, 112, 126, 115, 115, 113, 113, 111, 110, 111, 109, 109, 106, 105, 105, 106, 104, 106, 106, 109, 108, 104, 104, 105, 104, 105, 104, 105, 105, 106, 106, 106, 105, 105, 104, 104, 105, 105, 105, 104, 104, 105, 104, 104, 106, 106, 105, 106, 106, 105, 105, 106, 106, 105, 106, 105, 105, 105, 105, 104, 104, 104, 105, 106, 107, 107, 108, 105, 111, 103, 104, 107, 104, 103, 104, 103, 104, 103, 105, 103, 103, 104, 103, 103, 103, 103, 103, 103, 103, 102, 104, 104, 103, 104, 104, 103, 104, 104, 103, 103, 104, 104, 105, 103, 104, 103, 110, 104, 103, 103, 103, 103, 104, 102, 102, 103, 101, 99, 99, 105, 106, 104, 105, 104, 103, 105, 104, 104, 102, 103, 101, 103, 102, 102, 104, 103, 102, 102, 103, 101, 103, 102, 103, 102, 103, 103, 103, 102, 103, 102, 101, 101, 102, 102, 102, 102, 102, 103]
plt.plot(best_epi5, best_step5, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF best solution')
plt.plot(td_best_epi5, td_best_step5, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF best solution')
plt.plot(pure_best_epi5, pure_best_step5, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG best solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title1 = 'instance(5) best solution'
plt.title(title1)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[3,3,2] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi5, fsbl_step5, color='coral', linewidth=1, label='DDPG_APF feasible solution')
plt.plot(td_fsbl_epi5, td_fsbl_step5, color='limegreen', linewidth=1, label='TD3_APF feasible solution')
plt.plot(pure_fsbl_epi5, pure_fsbl_step5, color='darkgray', linewidth=1, label='pure DDPG feasible solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'instance(5) feasible solutions'
plt.title(title11)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[3,3,2] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl5 = len(fsbl_epi5)
t_num_fsbl5 = len(td_fsbl_epi5)
p_num_fsbl5 = len(pure_fsbl_epi5)

# [3,4,1]
best_epi6 = [0, 2, 4, 14, 28, 34, 57, 65, 74, 76, 91, 94, 102, 103, 108, 137, 144, 145, 152, 156, 172, 180, 186, 187, 213, 216, 220, 222, 238, 240, 241, 244, 245, 257, 267, 268, 271, 274, 282, 284, 285, 525, 549]
best_step6 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 156, 124, 123, 119, 106, 102, 108, 105, 106, 97, 99, 101, 97, 95, 92, 91, 91, 89, 87, 86, 89, 87, 87, 85]
fsbl_epi6 = [156, 172, 174, 175, 180, 181, 185, 186, 187, 190, 196, 197, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 378, 380, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 394, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 420, 421, 425, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
fsbl_step6 = [156, 124, 127, 125, 123, 127, 174, 119, 106, 108, 121, 122, 102, 131, 126, 108, 108, 124, 131, 105, 114, 106, 141, 122, 110, 99, 141, 137, 116, 104, 109, 106, 152, 120, 111, 96, 109, 97, 99, 99, 101, 103, 99, 97, 95, 98, 96, 94, 94, 95, 93, 93, 97, 97, 93, 95, 92, 94, 93, 90, 94, 90, 93, 93, 91, 92, 91, 91, 91, 91, 89, 96, 90, 87, 87, 89, 86, 91, 89, 87, 88, 88, 87, 87, 87, 87, 88, 87, 87, 86, 88, 87, 85, 86, 85, 86, 85, 85, 86, 85, 84, 85, 83, 84, 85, 84, 83, 84, 85, 87, 87, 84, 87, 90, 91, 95, 94, 86, 93, 97, 97, 101, 90, 93, 89, 95, 99, 89, 97, 93, 92, 96, 99, 88, 96, 97, 91, 92, 92, 91, 87, 88, 87, 86, 87, 87, 86, 84, 89, 91, 92, 94, 96, 91, 90, 93, 94, 94, 89, 89, 93, 91, 93, 89, 91, 93, 91, 92, 88, 92, 88, 89, 87, 88, 102, 87, 89, 87, 87, 89, 88, 91, 89, 91, 90, 87, 87, 85, 87, 86, 88, 94, 88, 87, 87, 89, 87, 88, 86, 88, 87, 86, 86, 88, 90, 89, 87, 91, 85, 92, 86, 87, 86, 84, 84, 86, 87, 87, 87, 85, 88, 86, 86, 85, 86, 85, 85, 85, 85, 86, 85, 85, 84, 83, 84, 102, 86, 86, 87, 104, 86, 87, 86, 87, 89, 87, 87, 90, 87, 88, 91, 93, 87, 90, 88, 90, 90, 90, 88, 89, 89, 87, 87, 86, 86, 85, 86, 87, 88, 86, 86, 87, 87, 86, 87, 87, 89, 89, 86, 88, 86, 87, 89, 87, 88, 89, 88, 90, 87, 87, 90, 86, 88, 88, 88, 87, 88, 87, 86, 87, 87, 86, 86, 87, 86, 87, 85, 86, 84, 85, 86, 86, 87, 88, 87, 88, 89, 88, 87, 110, 88, 87, 87, 91, 88, 88, 89, 87, 89, 91, 88, 89, 89, 89, 89, 89, 89, 90, 92, 94, 93, 89, 92, 92, 88, 87, 90, 91, 89, 92, 89, 90, 88, 89, 90, 89, 90, 90, 89, 88, 90, 87, 88, 88, 89, 90, 89, 90, 90, 88, 90, 90, 90, 89, 91, 91, 91, 90, 91, 90, 92, 91, 92, 91, 92, 93, 89, 92, 92, 93, 92, 93, 89, 90, 113, 86, 89, 91, 91, 89, 89, 92, 93, 91, 102, 89, 90, 89, 89, 91, 109, 87, 89, 90, 87]

td_best_epi6 = [0, 2, 3, 11, 52, 53, 92, 102, 364]
td_best_step6 = [200, 200, 200, 200, 200, 200, 200, 200, 200]
td_fsbl_epi6 =[]
td_fsbl_step6 = []

pure_best_epi6 = [0, 2, 4, 14, 28, 34, 52, 54, 60, 67, 68, 70, 75, 83, 84, 94, 133, 134, 135, 139, 141, 144, 145, 146, 148, 149, 150, 151, 165, 171, 176, 196, 221, 294, 303, 304, 312, 314, 317, 321, 324, 351, 388, 404, 601, 676]
pure_best_step6 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 91, 93, 90, 89, 89, 88, 89, 89, 87, 86, 86, 86, 85, 86, 84]
pure_fsbl_epi6 = [196, 198, 204, 206, 207, 208, 209, 212, 215, 220, 221, 222, 223, 224, 226, 227, 230, 231, 241, 242, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
pure_fsbl_step6 = [91, 120, 109, 177, 158, 131, 158, 103, 98, 153, 93, 94, 138, 107, 104, 98, 102, 104, 97, 105, 97, 105, 98, 101, 113, 116, 113, 151, 110, 98, 97, 146, 107, 114, 111, 114, 105, 111, 96, 96, 107, 102, 109, 93, 101, 96, 96, 93, 93, 92, 94, 92, 95, 92, 92, 96, 94, 94, 93, 94, 95, 92, 95, 93, 94, 90, 104, 94, 91, 91, 91, 89, 89, 90, 90, 91, 91, 91, 90, 89, 88, 90, 89, 88, 88, 89, 90, 89, 90, 87, 89, 90, 86, 90, 89, 90, 89, 88, 88, 88, 89, 88, 88, 88, 88, 87, 87, 89, 89, 88, 90, 89, 88, 89, 88, 88, 87, 88, 89, 86, 88, 89, 91, 88, 89, 89, 89, 90, 89, 89, 89, 88, 90, 88, 89, 90, 88, 89, 89, 87, 88, 89, 90, 89, 90, 88, 87, 88, 89, 87, 88, 87, 87, 88, 89, 87, 86, 87, 87, 88, 87, 86, 87, 87, 87, 86, 87, 87, 87, 87, 89, 88, 85, 85, 88, 86, 88, 87, 86, 85, 86, 87, 86, 87, 86, 87, 90, 88, 87, 88, 88, 87, 89, 88, 87, 88, 88, 90, 88, 89, 88, 89, 88, 89, 89, 89, 89, 87, 87, 89, 88, 88, 88, 88, 89, 90, 89, 90, 89, 89, 89, 90, 90, 91, 88, 90, 90, 89, 89, 90, 89, 90, 89, 90, 90, 90, 89, 87, 89, 90, 91, 91, 89, 91, 91, 91, 89, 88, 88, 90, 88, 87, 87, 88, 88, 88, 87, 87, 88, 88, 88, 88, 87, 88, 88, 88, 87, 88, 88, 87, 87, 86, 87, 87, 87, 87, 87, 87, 87, 88, 88, 87, 87, 87, 87, 87, 86, 88, 87, 87, 86, 87, 88, 87, 88, 86, 87, 88, 87, 86, 87, 89, 87, 88, 87, 88, 87, 87, 88, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 87, 89, 87, 87, 87, 88, 87, 87, 87, 87, 86, 88, 90, 87, 87, 87, 85, 86, 88, 86, 86, 86, 86, 87, 87, 88, 88, 87, 87, 88, 87, 90, 88, 87, 87, 87, 88, 87, 87, 88, 87, 87, 87, 88, 87, 87, 87, 87, 88, 86, 87, 88, 86, 87, 87, 88, 86, 87, 87, 88, 88, 87, 86, 88, 90, 88, 88, 88, 89, 88, 89, 88, 89, 89, 89, 89, 89, 90, 88, 89, 88, 87, 88, 87, 88, 88, 86, 88, 87, 86, 85, 86, 87, 86, 86, 86, 88, 87, 87, 85, 86, 86, 86, 86, 87, 86, 87, 86, 86, 86, 86, 85, 86, 86, 86, 86, 87, 86, 84, 85, 85, 85, 87, 85, 84, 85, 85, 84, 84, 84, 85, 84, 84, 85, 84, 84, 84, 83, 84, 84, 84, 83, 84, 83, 84, 84, 84, 84]
plt.plot(best_epi6, best_step6, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF best solution')
plt.plot(td_best_epi6, td_best_step6, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF best solution')
plt.plot(pure_best_epi6, pure_best_step6, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG best solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title1 = 'instance(6) best solution'
plt.title(title1)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[3,4,1] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi6, fsbl_step6, color='coral', linewidth=1, label='DDPG_APF feasible solution')
plt.plot(td_fsbl_epi6, td_fsbl_step6, color='limegreen', linewidth=1, label='TD3_APF feasible solution')
plt.plot(pure_fsbl_epi6, pure_fsbl_step6, color='darkgray', linewidth=1, label='pure DDPG feasible solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'instance(6) feasible solutions'
plt.title(title11)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[3,4,1] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl6 = len(fsbl_epi6)
t_num_fsbl6 = len(td_fsbl_epi6)
p_num_fsbl6 = len(pure_fsbl_epi6)

# [3,5,2]
best_epi7 = [0, 2, 4, 14, 28, 34, 53, 55, 60, 62, 167, 233, 234, 236, 238, 243, 247, 260, 291, 296, 303, 318, 361, 652, 658]
best_step7 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 81, 77, 78, 76, 73, 74, 74, 73, 72, 74, 71, 71]
fsbl_epi7 = [236, 238, 239, 240, 241, 242, 243, 245, 247, 248, 251, 253, 254, 255, 256, 257, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 280, 283, 285, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
fsbl_step7 = [81, 77, 79, 82, 116, 78, 78, 79, 76, 108, 130, 102, 81, 76, 109, 76, 73, 81, 76, 76, 78, 76, 93, 76, 76, 72, 76, 76, 78, 75, 73, 72, 72, 73, 76, 73, 74, 74, 75, 103, 74, 75, 73, 73, 106, 74, 73, 74, 73, 75, 77, 74, 75, 74, 75, 165, 75, 75, 75, 78, 77, 72, 106, 159, 75, 77, 75, 74, 74, 77, 77, 76, 79, 78, 78, 75, 77, 78, 77, 74, 77, 77, 77, 75, 79, 74, 81, 78, 76, 77, 76, 76, 74, 73, 75, 75, 76, 76, 75, 74, 76, 75, 74, 76, 75, 74, 74, 75, 75, 78, 73, 78, 76, 74, 74, 74, 74, 75, 76, 73, 74, 77, 78, 74, 74, 74, 74, 77, 74, 73, 72, 73, 76, 72, 73, 74, 72, 75, 76, 75, 109, 84, 85, 185, 83, 79, 87, 87, 92, 96, 89, 83, 103, 92, 90, 87, 85, 87, 81, 81, 88, 84, 86, 83, 80, 82, 85, 83, 91, 85, 86, 82, 85, 79, 81, 82, 82, 78, 79, 78, 76, 76, 77, 78, 78, 75, 130, 77, 74, 78, 75, 78, 77, 75, 77, 74, 96, 78, 77, 77, 77, 79, 76, 77, 77, 111, 78, 77, 76, 76, 77, 76, 81, 74, 77, 81, 103, 79, 77, 80, 76, 100, 77, 76, 77, 76, 77, 76, 78, 80, 78, 74, 76, 76, 78, 78, 77, 80, 78, 77, 79, 81, 79, 78, 79, 81, 79, 83, 83, 80, 80, 78, 86, 79, 79, 78, 78, 81, 82, 81, 81, 80, 79, 79, 79, 78, 78, 76, 79, 76, 77, 78, 77, 76, 76, 77, 81, 77, 78, 77, 77, 79, 78, 76, 80, 78, 78, 77, 83, 78, 78, 79, 78, 80, 77, 77, 77, 75, 76, 75, 74, 76, 76, 76, 74, 78, 75, 80, 76, 78, 77, 80, 77, 75, 76, 77, 77, 75, 78, 74, 75, 83, 79, 76, 80, 74, 77, 77, 77, 76, 76, 74, 73, 75, 75, 76, 72, 75, 77, 76, 76, 76, 77, 75, 79, 80, 75, 77, 78, 79, 73, 75, 75, 73, 76, 71, 80, 73, 73, 77, 72, 73, 73, 72, 74, 74, 73, 74, 73, 75, 75, 76, 73, 75, 73, 73, 72, 72, 78, 72, 76, 72, 74, 73, 72, 75, 72, 73, 71, 72, 72, 73, 75, 72, 71, 71, 73, 71, 72, 73, 70, 72, 71, 73, 72, 74, 73, 72, 73, 72, 72, 71, 73, 73, 71, 71, 71, 71, 73, 71, 72, 73, 70, 70, 72, 72, 71, 70, 71, 72, 70, 70, 71, 71, 70, 72]

td_best_epi7 = [0, 2, 3, 11, 52, 74, 77, 88, 91, 108, 124, 136, 138, 141, 146, 147, 158, 161, 166, 167, 182, 221, 224, 225, 227, 308, 328]
td_best_step7 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 184, 165, 168]
td_fsbl_epi7 = [227, 228, 263, 270, 275, 301, 308, 314, 315, 321, 325, 328, 330, 423, 427, 432, 466]
td_fsbl_step7 = [184, 198, 196, 193, 192, 189, 165, 186, 194, 199, 190, 168, 177, 173, 189, 194, 182]

pure_best_epi7 = [0, 2, 4, 14, 28, 34, 52, 53, 55, 57, 59, 64, 66, 67, 68, 71, 73, 74, 75, 80, 85, 87, 89, 110, 111, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 139, 140, 142, 143, 144, 148, 155, 157, 159, 161, 163, 168, 169, 176, 177, 178, 179, 181, 182, 185, 188, 190, 192, 193, 194, 197, 204, 207, 214, 218, 220, 222, 223, 224, 237, 240, 246, 252, 262, 265, 272, 273, 274, 275, 277, 284, 286, 287, 288, 299, 301, 315, 322, 354, 357, 427, 431, 471, 477, 488, 496, 497, 500, 527, 531, 536, 552, 559, 561, 563, 575, 645]
pure_best_step7 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 171, 153, 94, 80, 79, 79, 75, 70, 69, 69, 70, 70, 70, 69, 70, 68, 68, 68, 67, 67, 67, 67, 67, 67, 67, 67, 67]
pure_fsbl_epi7 = [284, 286, 287, 288, 291, 294, 295, 296, 299, 301, 302, 305, 306, 307, 309, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
pure_fsbl_step7 = [171, 153, 94, 80, 183, 178, 190, 185, 79, 79, 79, 136, 77, 168, 147, 139, 75, 76, 91, 80, 102, 78, 81, 70, 70, 72, 72, 74, 77, 103, 85, 103, 69, 71, 70, 70, 100, 120, 102, 77, 71, 77, 74, 78, 71, 69, 73, 72, 69, 70, 71, 71, 71, 71, 72, 71, 70, 72, 74, 73, 73, 72, 72, 73, 73, 72, 74, 105, 71, 72, 73, 73, 73, 79, 77, 73, 76, 77, 79, 77, 75, 74, 72, 72, 78, 77, 79, 77, 73, 76, 75, 73, 73, 73, 72, 72, 72, 71, 72, 72, 72, 72, 72, 72, 72, 72, 74, 73, 74, 73, 73, 72, 70, 70, 74, 71, 73, 70, 72, 99, 72, 70, 77, 113, 72, 103, 107, 154, 75, 70, 72, 102, 84, 98, 78, 80, 75, 77, 73, 74, 77, 76, 76, 75, 80, 78, 79, 79, 87, 79, 79, 103, 78, 73, 74, 96, 102, 76, 81, 70, 82, 79, 74, 81, 73, 69, 69, 70, 69, 69, 71, 70, 70, 70, 121, 69, 70, 69, 69, 69, 69, 69, 69, 69, 68, 68, 68, 71, 68, 69, 68, 68, 99, 83, 68, 82, 67, 68, 96, 97, 68, 68, 68, 68, 69, 74, 68, 68, 68, 67, 67, 67, 67, 89, 67, 67, 67, 67, 67, 67, 67, 69, 68, 67, 67, 67, 68, 67, 67, 67, 67, 68, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 67, 67, 67, 67, 67, 67, 68, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 67, 69, 69, 69, 69, 106, 68, 67, 69, 69, 69, 68, 68, 68, 68, 69, 68, 69, 68, 69, 69, 69, 70, 69, 69, 69, 69, 69, 69, 69, 70, 69, 69, 70, 70, 69, 70, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 67, 67, 68, 67, 68, 67, 68, 67, 67, 68, 68, 67, 68, 68, 68, 68, 68, 68, 68, 67, 68, 68, 68, 68, 68, 68, 67, 68, 68, 68, 68, 68, 68, 69, 69, 68, 69, 68, 68, 68, 68, 68, 68, 68, 68, 67, 67, 68, 68, 67, 68, 68, 67, 68, 68, 68]
plt.plot(best_epi7, best_step7, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF best solution')
plt.plot(td_best_epi7, td_best_step7, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF best solution')
plt.plot(pure_best_epi7, pure_best_step7, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG best solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title1 = 'instance(7) best solution'
plt.title(title1)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[3,5,2] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi7, fsbl_step7, color='coral', linewidth=1, label='DDPG_APF feasible solution')
plt.plot(td_fsbl_epi7, td_fsbl_step7, color='limegreen', linewidth=1, label='TD3_APF feasible solution')
plt.plot(pure_fsbl_epi7, pure_fsbl_step7, color='darkgray', linewidth=1, label='pure DDPG feasible solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'instance(7) feasible solutions'
plt.title(title11)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[3,5,2] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl7 = len(fsbl_epi7)
t_num_fsbl7 = len(td_fsbl_epi7)
p_num_fsbl7 = len(pure_fsbl_epi7)

# [4,2,3]
best_epi8 = [0, 2, 14, 20, 28, 31, 34, 52, 53, 62, 115, 122, 223, 227, 228, 229, 248, 253, 254, 258, 259, 260, 261, 264, 266, 267, 268, 269, 273, 383, 388, 390, 393, 396, 399, 402, 412, 585, 630]
best_step8 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 128, 115, 111, 106, 105, 103, 106, 101, 101, 102, 98, 99, 98, 98, 95, 94, 92, 94, 94, 92, 91, 91, 88]
fsbl_epi8 = [248, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 317, 321, 323, 324, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 430, 431, 432, 433, 435, 436, 437, 438, 439, 441, 442, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 479, 482, 483, 485, 486, 487, 488, 490, 491, 492, 494, 496, 501, 502, 508, 509, 510, 511, 513, 520, 521, 523, 525, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 598, 606, 608, 610, 611, 612, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 644, 645, 646, 647, 648, 649, 652, 653, 655, 656, 657, 658, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 679, 680, 681, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 699]
fsbl_step8 = [128, 152, 115, 111, 115, 119, 106, 105, 103, 106, 109, 102, 101, 101, 102, 98, 99, 101, 102, 98, 100, 97, 100, 120, 104, 105, 100, 103, 100, 97, 102, 101, 96, 96, 98, 95, 94, 95, 95, 95, 100, 98, 111, 97, 97, 96, 97, 137, 94, 105, 94, 97, 98, 95, 94, 94, 95, 94, 118, 93, 126, 98, 101, 102, 104, 104, 104, 102, 104, 105, 99, 99, 101, 100, 99, 99, 96, 101, 97, 98, 98, 99, 97, 94, 95, 104, 94, 97, 92, 92, 96, 93, 94, 93, 94, 94, 96, 93, 92, 94, 92, 95, 95, 93, 94, 95, 95, 96, 91, 94, 95, 94, 100, 93, 99, 129, 152, 102, 94, 92, 95, 91, 92, 97, 92, 96, 96, 94, 93, 91, 93, 100, 93, 95, 93, 92, 94, 92, 94, 92, 90, 95, 93, 93, 91, 94, 92, 90, 90, 90, 91, 90, 89, 90, 146, 92, 91, 91, 94, 92, 90, 91, 90, 93, 92, 91, 91, 90, 91, 91, 90, 94, 91, 91, 93, 94, 96, 91, 93, 112, 94, 93, 158, 95, 93, 96, 95, 97, 96, 191, 99, 98, 152, 93, 98, 94, 94, 110, 95, 92, 93, 95, 91, 92, 94, 102, 93, 157, 104, 107, 155, 97, 94, 97, 96, 96, 98, 105, 110, 152, 106, 91, 92, 110, 91, 182, 92, 106, 99, 93, 101, 152, 99, 97, 103, 94, 95, 108, 107, 103, 98, 99, 92, 88, 100, 93, 104, 89, 98, 88, 89, 110, 90, 93, 93, 90, 95, 96, 100, 98, 91, 95, 93, 94, 98, 100, 93, 94, 96, 97, 94, 96, 92, 94, 93, 92, 96, 94, 96, 93, 89, 93, 94, 92, 94, 92, 92, 93, 93, 90, 89, 92, 92, 93, 90, 90, 91, 94, 90, 90, 89, 89, 90, 89]

td_best_epi8 = [0, 2, 3, 32, 49, 52, 53, 57, 58, 73, 79, 80, 84, 87, 110, 112, 114, 120, 121, 421, 620, 622, 626, 629, 637, 638, 639, 653, 660]
td_best_step8 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 123]
td_fsbl_epi8 = [660]
td_fsbl_step8 = [123]

pure_best_epi8 = [0, 2, 4, 14, 16, 28, 34, 53, 54, 55, 82, 93, 94, 95, 96, 97, 122, 125, 126, 129, 130, 131, 132, 134, 138, 139, 142, 144, 145, 148, 165, 168, 169, 170, 174, 175, 176, 178, 180, 196, 199, 200, 203, 204, 205, 209, 215, 216, 222, 249, 250, 255, 280, 288, 294, 296, 307, 312, 377, 438, 442, 444, 449, 454, 458, 489, 603, 688]
pure_best_step8 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 88, 89, 88, 86, 87, 85, 88, 85, 86, 86, 85, 87, 87, 86, 85, 86, 85, 86, 85, 85]
pure_fsbl_epi8 = [222, 240, 242, 243, 245, 246, 247, 248, 249, 250, 255, 268, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 460, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699]
pure_fsbl_step8 = [88, 108, 94, 96, 155, 98, 94, 106, 89, 88, 86, 88, 87, 93, 88, 88, 88, 86, 86, 85, 93, 86, 88, 88, 85, 156, 154, 87, 157, 88, 87, 87, 87, 88, 86, 88, 88, 86, 87, 86, 87, 86, 87, 86, 86, 87, 88, 87, 86, 86, 86, 102, 88, 86, 91, 101, 90, 101, 96, 92, 93, 95, 91, 97, 102, 102, 89, 86, 87, 86, 88, 86, 86, 86, 87, 88, 88, 85, 87, 87, 86, 86, 86, 86, 86, 86, 85, 86, 90, 88, 89, 87, 88, 86, 88, 86, 86, 86, 86, 87, 87, 87, 89, 87, 87, 87, 87, 88, 87, 87, 87, 87, 87, 89, 88, 88, 90, 89, 90, 89, 88, 94, 103, 155, 151, 88, 88, 104, 88, 88, 87, 88, 87, 86, 86, 87, 88, 86, 87, 106, 87, 87, 87, 87, 86, 86, 88, 86, 86, 85, 86, 87, 86, 87, 86, 87, 85, 87, 87, 87, 86, 87, 88, 86, 86, 86, 86, 86, 85, 86, 86, 86, 85, 86, 86, 86, 86, 86, 86, 86, 86, 87, 85, 86, 87, 86, 87, 86, 85, 85, 86, 86, 85, 86, 85, 87, 85, 87, 86, 86, 86, 85, 86, 86, 86, 87, 87, 86, 86, 85, 85, 86, 86, 85, 86, 86, 86, 87, 86, 86, 86, 86, 86, 86, 86, 85, 85, 85, 86, 85, 86, 86, 86, 86, 86, 86, 86, 85, 87, 87, 85, 87, 85, 86, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 86, 86, 86, 85, 86, 85, 86, 85, 86, 86, 86, 86, 85, 86, 86, 86, 85, 86, 85, 85, 86, 85, 86, 85, 86, 86, 86, 85, 85, 86, 86, 85, 86, 86, 86, 85, 86, 86, 86, 86, 86, 85, 85, 86, 86, 86, 86, 85, 85, 86, 86, 86, 85, 86, 86, 86, 85, 86, 86, 85, 86, 86, 86, 86, 86, 86, 85, 86, 86, 86, 86, 86, 85, 86, 85, 85, 86, 85, 86, 85, 85, 85, 86, 85, 86, 85, 85, 86, 85, 85, 85, 86, 85, 90, 86, 85, 86]
plt.plot(best_epi8, best_step8, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF best solution')
plt.plot(td_best_epi8, td_best_step8, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF best solution')
plt.plot(pure_best_epi8, pure_best_step8, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG best solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title1 = 'instance(8) best solution'
plt.title(title1)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[4,2,3] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi8, fsbl_step8, color='coral', linewidth=1, label='DDPG_APF feasible solution')
plt.plot(td_fsbl_epi8, td_fsbl_step8, color='limegreen', linewidth=1, label='TD3_APF feasible solution')
plt.plot(pure_fsbl_epi8, pure_fsbl_step8, color='darkgray', linewidth=1, label='pure DDPG feasible solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'instance(8) feasible solutions'
plt.title(title11)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[4,2,3] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl8 = len(fsbl_epi8)
t_num_fsbl8 = len(td_fsbl_epi8)
p_num_fsbl8 = len(pure_fsbl_epi8)

# [4,3,4]
best_epi9 = [0, 2, 14, 20, 28, 34, 66, 83, 84, 90, 91, 92, 95, 107, 109, 110, 111, 113, 115, 117, 121, 127, 129, 130, 171, 173, 183, 193, 230, 266, 620, 684, 686]
best_step9 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 90, 95, 91, 85, 78, 81, 78, 75, 75, 72, 73, 71, 71, 71, 71, 71]
fsbl_epi9 = [113, 115, 117, 120, 121, 122, 124, 127, 129, 130, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 227, 230, 232, 239, 241, 244, 263, 266, 278, 281, 286, 289, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698]
fsbl_step9 = [90, 95, 91, 94, 85, 93, 82, 78, 81, 78, 75, 77, 75, 74, 76, 77, 72, 72, 73, 75, 72, 73, 77, 76, 74, 183, 74, 73, 74, 159, 94, 102, 74, 77, 75, 75, 74, 78, 77, 74, 76, 76, 77, 72, 75, 81, 71, 71, 76, 74, 79, 75, 103, 74, 72, 71, 73, 72, 78, 77, 76, 71, 73, 72, 72, 73, 72, 72, 73, 72, 72, 72, 73, 71, 74, 72, 75, 75, 70, 78, 74, 72, 73, 73, 82, 72, 82, 70, 72, 71, 72, 73, 71, 103, 70, 72, 72, 71, 71, 71, 74, 72, 105, 72, 72, 72, 72, 72, 75, 71, 74, 71, 71, 73, 74, 72, 71, 73, 75, 73, 74, 75, 75, 72, 73, 74, 72, 76, 72, 72, 73, 73, 72, 71, 73, 72, 72, 70, 71, 108, 71, 72, 71, 72, 73, 69, 71, 80, 74, 70, 75, 74, 72, 72, 73, 76, 72, 75, 75, 75, 74, 76, 76, 76, 77, 77, 76, 76, 78, 83, 77, 77, 78, 76, 73, 77, 77, 79, 78, 75, 78, 76, 76, 78, 80, 78, 76, 78, 76, 76, 73, 76, 74, 74, 72, 75, 74, 73, 75, 72, 74, 73, 73, 74, 75, 73, 74, 72, 73, 73, 73, 75, 75, 73, 76, 73, 81, 72, 71, 72, 74, 74, 72, 73, 73, 74, 72, 72, 79, 74, 71, 73, 71, 72, 73, 73, 73, 74, 72, 74, 72, 72, 75, 73, 71, 74, 77, 75, 74, 72, 72, 75, 72, 76, 72, 73, 74, 74, 74, 74, 74, 74, 74, 76, 74, 74, 75, 74, 73, 73, 166, 72, 74, 75, 79, 76, 74, 90, 78, 76, 90, 73, 73, 75, 74, 77, 75, 76, 75, 73, 74, 76, 75, 76, 75, 75, 76, 77, 77, 76, 75, 79, 78, 77, 78, 76, 77, 78, 77, 78, 80, 75, 75, 76, 160, 74, 74, 73, 73, 138, 72, 71, 72, 103, 77, 75, 74, 76, 73, 77, 75, 84, 77, 76, 114, 74, 75, 74, 75, 76, 120, 73, 72, 74, 74, 75, 71, 73, 73, 73, 72, 73, 75, 74, 71, 73, 73, 72, 73, 72, 75, 75, 74, 72, 72, 74, 72, 71, 72, 71, 71, 70, 72, 71, 72, 71, 72, 71, 72, 71, 71, 73, 72, 73, 72, 73, 71, 73, 73, 73, 72, 74, 73, 73, 73, 102, 72, 72, 73, 73, 73, 74, 73, 73, 73, 74, 74, 73, 74, 74, 73, 72, 72, 73, 74, 71, 72, 72, 72, 71, 72, 72, 72, 73, 72, 71, 72, 72, 73, 72, 72, 71, 72, 71, 72, 72, 71, 72, 72, 72, 71, 71, 71, 72, 72, 74, 73, 73, 72, 73, 73, 73, 72, 72]

td_best_epi9 = [0, 2, 3, 11, 40, 49, 52, 63, 72, 97, 98, 101, 110, 113, 576]
td_best_step9 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 77]
td_fsbl_epi9 = [576, 657, 658, 664, 670, 672, 674, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
td_fsbl_step9 = [77, 122, 111, 200, 94, 96, 111, 176, 101, 104, 91, 88, 90, 94, 86, 85, 88, 88, 83, 82, 88, 83, 88, 86, 80, 85, 84, 89, 83]


pure_best_epi9 = [0, 2, 4, 14, 28, 34, 54, 67, 84, 85, 86, 93, 94, 97, 98, 101, 102, 103, 118]
pure_best_step9 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200]
pure_fsbl_epi9 = []
pure_fsbl_step9 = []
plt.plot(best_epi9, best_step9, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF best solution')
plt.plot(td_best_epi9, td_best_step9, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF best solution')
plt.plot(pure_best_epi9, pure_best_step9, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG best solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title1 = 'instance(9) best solution'
plt.title(title1)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[4,3,4] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi9, fsbl_step9, color='coral', linewidth=1, label='DDPG_APF feasible solution')
plt.plot(td_fsbl_epi9, td_fsbl_step9, color='limegreen', linewidth=1, label='TD3_APF feasible solution')
plt.plot(pure_fsbl_epi9, pure_fsbl_step9, color='darkgray', linewidth=1, label='pure DDPG feasible solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'instance(9) feasible solutions'
plt.title(title11)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[4,3,4] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl9 = len(fsbl_epi9)
t_num_fsbl9 = len(td_fsbl_epi9)
p_num_fsbl9 = len(pure_fsbl_epi9)

# [5,2,3]
best_epi10 = [0, 2, 14, 20, 31, 34, 53, 54, 56, 58, 60, 61, 118, 121, 130, 131, 137, 142, 167, 173, 177, 180, 181, 197, 230, 233, 235, 236, 237, 239, 265, 475, 478, 483, 488, 491, 494, 502, 506, 530, 554]
best_step10 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 87, 79, 77, 77, 75, 74, 74, 74, 74, 74, 77, 75, 76, 75, 75, 74, 74, 74, 74, 74]
fsbl_epi10 = [180, 181, 182, 183, 184, 185, 186, 188, 192, 195, 197, 198, 199, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 265, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 592, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 637, 638, 640, 642, 643, 644, 647, 648, 649, 650, 652, 653, 654, 655, 658, 659, 660, 663, 665, 666, 667, 668, 669, 673, 674, 678, 679, 680, 682, 699]
fsbl_step10 = [87, 79, 79, 105, 108, 83, 77, 78, 87, 103, 77, 160, 154, 144, 152, 76, 77, 78, 76, 77, 107, 76, 75, 76, 74, 74, 74, 74, 75, 74, 103, 74, 77, 76, 75, 76, 76, 75, 76, 76, 75, 76, 76, 75, 75, 75, 75, 75, 74, 75, 74, 76, 76, 76, 74, 76, 75, 75, 74, 76, 74, 75, 75, 74, 74, 76, 76, 75, 75, 77, 75, 74, 74, 75, 75, 74, 74, 75, 75, 75, 74, 74, 75, 74, 75, 75, 74, 74, 74, 74, 75, 76, 74, 74, 75, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 74, 74, 75, 76, 75, 75, 75, 74, 74, 74, 74, 75, 74, 74, 74, 74, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 73, 74, 74, 74, 75, 74, 74, 74, 73, 74, 74, 75, 74, 74, 74, 74, 75, 75, 74, 75, 75, 77, 75, 75, 75, 76, 77, 76, 75, 76, 76, 77, 76, 76, 76, 77, 75, 75, 75, 76, 75, 75, 75, 75, 75, 76, 76, 75, 77, 76, 77, 76, 75, 74, 74, 73, 73, 73, 73, 73, 73, 72, 73, 73, 73]

td_best_epi10 = [0, 2, 3, 6, 32, 52, 53, 116, 303, 376, 379, 383, 384, 385, 453, 456, 458, 464, 522, 591, 597, 599]
td_best_step10 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 121, 87, 84, 80, 79, 77, 75, 75, 73, 74, 73, 74, 73]
td_fsbl_epi10 = [174, 376, 379, 382, 383, 384, 385, 390, 391, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 493, 518, 522, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 610, 611, 612, 613, 614, 615, 617, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 662, 663, 664, 667, 668, 669, 672, 674, 676, 679, 680, 681, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
td_fsbl_step10 = [198, 121, 87, 89, 84, 80, 79, 91, 102, 173, 83, 77, 76, 77, 75, 76, 75, 75, 73, 98, 75, 74, 153, 121, 76, 74, 78, 74, 74, 74, 73, 75, 74, 76, 73, 73, 73, 73, 72, 73, 73, 74, 73, 73, 89, 93, 86, 78, 107, 90, 79, 109, 73, 77, 83, 74, 77, 74, 74, 74, 73, 74, 74, 73, 74, 75, 73, 74, 74, 75, 74, 74, 77, 83, 77, 76, 75, 75, 74, 74, 76, 77, 78, 77, 75, 75, 75, 77, 77, 77, 80, 77, 75, 76, 77, 74, 75, 76, 72, 74, 75, 73, 74, 73, 72, 77, 73, 74, 74, 74, 75, 75, 74, 76, 76, 75, 74, 76, 77, 79, 78, 77, 111, 78, 83, 81, 78, 81, 77, 81, 77, 81, 87]

pure_best_epi10 = [0, 2, 4, 14, 16, 28, 34, 52, 53, 91, 103, 104, 117, 136, 158, 189, 198, 218, 233, 239, 259, 280, 316, 519, 613, 630]
pure_best_step10 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 71, 70, 70, 70, 70, 70]
pure_fsbl_epi10 = [259, 269, 270, 272, 278, 280, 281, 282, 293, 294, 296, 297, 298, 308, 313, 314, 315, 316, 318, 319, 321, 325, 328, 333, 335, 336, 337, 341, 342, 343, 344, 345, 351, 352, 353, 354, 359, 360, 361, 362, 364, 368, 371, 372, 379, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 421, 423, 424, 425, 426, 428, 429, 431, 432, 434, 437, 438, 439, 440, 441, 443, 445, 447, 449, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 551, 553, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 625, 627, 628, 629, 630, 631, 634, 635, 636, 637, 640, 641, 642, 643, 670, 673, 676, 677, 684, 687, 688, 689, 690, 692, 693, 696, 698, 699]
pure_fsbl_step10 = [71, 72, 72, 72, 72, 70, 72, 71, 71, 71, 72, 71, 71, 71, 71, 71, 72, 70, 71, 71, 71, 71, 75, 73, 76, 74, 74, 74, 74, 73, 73, 74, 74, 75, 75, 76, 79, 82, 79, 77, 78, 72, 72, 73, 72, 71, 73, 73, 74, 74, 74, 73, 74, 74, 73, 73, 76, 75, 75, 74, 73, 75, 82, 73, 74, 76, 103, 75, 74, 74, 77, 75, 75, 76, 76, 103, 75, 74, 74, 75, 74, 71, 72, 72, 72, 72, 73, 71, 71, 72, 104, 72, 72, 75, 75, 104, 71, 72, 72, 73, 104, 75, 73, 74, 75, 73, 73, 74, 73, 73, 73, 74, 78, 140, 81, 73, 74, 74, 75, 75, 75, 74, 75, 74, 74, 74, 74, 74, 75, 74, 74, 73, 73, 75, 75, 74, 74, 73, 74, 74, 73, 73, 73, 71, 73, 73, 136, 72, 71, 71, 74, 71, 72, 70, 72, 71, 70, 71, 72, 72, 72, 71, 72, 72, 71, 71, 71, 73, 70, 71, 71, 71, 71, 71, 71, 71, 72, 71, 72, 71, 72, 71, 71, 72, 72, 71, 71, 71, 73, 72, 71, 71, 71, 71, 72, 72, 71, 71, 73, 71, 72, 72, 72, 72, 71, 71, 73, 72, 73, 71, 72, 72, 73, 71, 74, 74, 72, 74, 72, 73, 73, 73, 72, 72, 72, 72, 72, 73, 73, 74, 71, 73, 72, 71, 70, 72, 71, 72, 71, 72, 72, 71, 70, 71, 71, 70, 71, 70, 73, 71, 71, 71, 71, 71, 71, 70, 70, 71, 71, 73, 72, 72, 72, 72, 71, 72, 71, 73, 77, 75, 72]

plt.plot(best_epi10, best_step10, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF best solution')
plt.plot(td_best_epi10, td_best_step10, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF best solution')
plt.plot(pure_best_epi10, pure_best_step10, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG best solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title1 = 'instance(10) best solution'
plt.title(title1)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[5,2,3] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi10, fsbl_step10, color='coral', linewidth=1, label='DDPG_APF feasible solution')
plt.plot(td_fsbl_epi10, td_fsbl_step10, color='limegreen', linewidth=1, label='TD3_APF feasible solution')
plt.plot(pure_fsbl_epi10, pure_fsbl_step10, color='darkgray', linewidth=1, label='pure DDPG feasible solution')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'instance(10) feasible solutions'
plt.title(title11)
plt.xlabel('episodes')
plt.ylabel('number of steps of the solution')
fig_path = 'result/' + '[5,2,3] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl10 = len(fsbl_epi10)
t_num_fsbl10 = len(td_fsbl_epi10)
p_num_fsbl10 = len(pure_fsbl_epi10)

# [5,5,3]
best_epi11 = [0, 2, 4, 14, 28, 34, 55, 415, 420, 423, 445, 484, 486, 495, 504, 525, 534, 611, 645]
best_step11 = [200, 200, 200, 200, 200, 200, 200, 51, 50, 50, 51, 52, 49, 48, 48, 48, 48, 47, 47]
fsbl_epi11 = [415, 419, 420, 423, 424, 427, 440, 444, 445, 447, 448, 449, 450, 453, 461, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
fsbl_step11 = [51, 50, 50, 50, 53, 103, 52, 52, 51, 51, 53, 51, 51, 51, 50, 102, 56, 153, 66, 56, 69, 55, 56, 102, 54, 56, 103, 53, 103, 50, 53, 52, 53, 49, 51, 51, 51, 51, 51, 49, 51, 50, 48, 50, 50, 49, 50, 50, 50, 50, 50, 48, 50, 48, 49, 50, 48, 48, 49, 49, 48, 49, 48, 48, 48, 48, 49, 48, 48, 48, 49, 50, 48, 48, 50, 48, 48, 49, 49, 110, 48, 48, 48, 49, 48, 48, 48, 49, 48, 48, 48, 54, 49, 49, 48, 50, 54, 54, 49, 54, 49, 49, 52, 49, 52, 49, 50, 49, 49, 50, 49, 50, 49, 48, 48, 48, 49, 48, 49, 48, 49, 49, 48, 48, 49, 48, 48, 48, 48, 48, 50, 48, 48, 48, 48, 48, 52, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 48, 48, 48, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 52, 48, 48, 48, 48, 48, 47, 48, 47, 49, 48, 48, 49, 47, 49, 48, 48, 48, 51, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49, 49, 48, 49, 48, 49, 48, 48, 48, 48, 49, 48, 49, 49, 51, 48, 48, 48, 49, 48, 48, 48, 47, 48, 48, 48, 48, 48, 49, 48, 50, 48]

td_best_epi11 = [0, 2, 3, 11, 52]
td_best_step11 = [200, 200, 200, 200, 200]
td_fsbl_epi11 = []
td_fsbl_step11 = []

pure_best_epi11 = [0, 2, 4, 14, 28, 34, 55, 57, 59, 60, 61, 64, 65, 66, 68, 69, 70, 71, 72, 79, 87, 89, 91, 94, 96, 97, 98, 113, 127, 129, 136, 143, 144, 151, 152, 158, 166, 167, 191, 192, 195, 232, 236, 238, 246, 248, 249, 250, 252, 270, 272, 283, 310, 330, 332, 333, 334, 339, 342, 343, 344, 348, 375, 387, 390, 392, 401, 403, 409, 412, 415, 419, 426, 428, 429, 430, 434, 435, 444, 445, 447, 449, 450, 451, 454, 461, 464, 466, 467, 482, 498, 499, 500, 539, 540, 541, 543, 544, 585, 598, 599, 624]
pure_best_step11 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 80, 60, 54, 53]
pure_fsbl_epi11 = [585, 587, 595, 598, 599, 602, 603, 605, 611, 612, 613, 615, 618, 619, 621, 622, 624, 625, 626, 628, 631, 633, 635, 636, 643, 644, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699]
pure_fsbl_step11 = [80, 89, 89, 60, 54, 56, 57, 130, 123, 57, 104, 118, 151, 65, 67, 90, 53, 60, 58, 59, 62, 58, 65, 66, 85, 76, 68, 65, 73, 68, 65, 76, 78, 76, 64, 63, 65, 65, 99, 70, 68, 69, 66, 66, 61, 67, 65, 114, 62, 62, 95, 62, 67, 59, 59, 63, 61, 73, 62, 64, 66, 68, 69, 65, 88, 66, 59, 75, 57, 62, 59]

plt.plot(best_epi11, best_step11, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF')
plt.plot(td_best_epi11, td_best_step11, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF')
plt.plot(pure_best_epi11, pure_best_step11, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title1 = 'Instance(11) best solution'
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + '[5,5,3] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi11, fsbl_step11, color='coral', linewidth=1, label='DDPG_APF')
plt.plot(td_fsbl_epi11, td_fsbl_step11, color='limegreen', linewidth=1, label='TD3_APF')
plt.plot(pure_fsbl_epi11, pure_fsbl_step11, color='darkgray', linewidth=1, label='pure DDPG')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'Instance(11) feasible solutions'
plt.title(title11)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + '[5,5,3] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl11 = len(fsbl_epi11)
t_num_fsbl11 = len(td_fsbl_epi11)
p_num_fsbl11 = len(pure_fsbl_epi11)

# [4,4,2]
best_epi12 = [0, 2, 4, 14, 28, 35, 37, 52, 67, 76, 84, 86, 87, 97, 101, 106, 109, 145, 147, 149, 162, 167, 202, 219, 286, 346, 522, 652]
best_step12 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 159, 71, 70, 72, 70, 71, 70, 70, 71, 70, 71, 71, 71, 71, 72]
fsbl_epi12 = [97, 100, 101, 102, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 134, 137, 138, 139, 140, 141, 145, 147, 148, 149, 151, 152, 157, 158, 160, 161, 162, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699]
fsbl_step12 = [159, 156, 71, 77, 70, 72, 80, 72, 72, 73, 71, 153, 159, 71, 75, 72, 74, 72, 73, 78, 103, 71, 71, 72, 72, 154, 70, 71, 73, 70, 71, 71, 73, 72, 71, 71, 70, 71, 71, 71, 72, 73, 75, 79, 79, 73, 71, 72, 70, 71, 71, 71, 71, 71, 71, 73, 73, 73, 73, 73, 103, 106, 71, 70, 75, 71, 74, 72, 72, 73, 74, 77, 72, 71, 72, 71, 71, 72, 71, 71, 71, 71, 72, 71, 71, 72, 71, 72, 71, 72, 73, 74, 74, 73, 73, 75, 124, 72, 72, 72, 72, 71, 72, 71, 71, 71, 70, 71, 71, 72, 71, 71, 71, 71, 71, 71, 74, 74, 74, 73, 72, 72, 71, 72, 71, 71, 71, 73, 71, 72, 72, 72, 71, 72, 72, 73, 73, 72, 72, 72, 71, 72, 72, 72, 71, 73, 72, 71, 73, 72, 72, 73, 76, 73, 72, 73, 72, 72, 73, 73, 72, 72, 72, 72, 73, 73, 72, 72, 71, 72, 72, 72, 72, 72, 72, 72, 71, 72, 71, 71, 75, 71, 72, 72, 70, 70, 72, 72, 71, 75, 72, 73, 74, 73, 72, 72, 72, 72, 72, 72, 72, 73, 74, 71, 71, 72, 71, 72, 72, 71, 71, 71, 70, 72, 72, 73, 72, 73, 72, 71, 70, 151, 93, 102, 75, 72, 71, 72, 72, 71, 71, 71, 72, 71, 72, 70, 71, 72, 79, 71, 71, 72, 71, 72, 73, 72, 72, 71, 72, 152, 73, 72, 71, 73, 73, 72, 71, 72, 71, 71, 71, 72, 71, 72, 71, 72, 72, 72, 71, 72, 72, 72, 71, 107, 71, 71, 70, 71, 71, 71, 72, 71, 71, 70, 72, 75, 71, 83, 71, 72, 72, 72, 73, 72, 79, 71, 71, 72, 72, 71, 72, 71, 72, 72, 73, 72, 73, 74, 72, 71, 73, 72, 71, 71, 72, 72, 71, 71, 72, 73, 74, 71, 71, 74, 74, 72, 72, 71, 73, 72, 72, 73, 72, 73, 75, 73, 74, 71, 71, 71, 72, 71, 71, 72, 73, 73, 72, 71, 72, 72, 72, 72, 72, 72, 72, 72, 73, 72, 73, 73, 74, 73, 73, 72, 73, 71, 73, 159, 74, 74, 75, 73, 73, 71, 75, 75, 71, 71, 71, 75, 72, 73, 73, 72, 73, 72, 72, 72, 72, 73, 72, 71, 73, 72, 72, 73, 77, 72, 72, 73, 71, 73, 72, 72, 71, 71, 73, 72, 73, 73, 73, 72, 72, 73, 72, 73, 72, 73, 72, 72, 72, 71, 72, 73, 71, 72, 72, 72, 71, 72, 71, 72, 72, 72, 72, 72, 72, 72, 73, 72, 72, 72, 72, 72, 72, 72, 73, 72, 72, 72, 72, 73, 71, 72, 72, 72, 72, 71, 73, 73, 71, 72, 71, 72, 73, 71, 72, 71, 72, 72, 71, 72, 72, 72, 72, 73, 73, 73, 72, 72, 71, 71, 72, 73, 72, 73, 72, 73, 72, 72, 71, 72, 72, 72, 72, 74, 73, 72, 72, 71, 71, 71, 72, 72]

td_best_epi12 = [0, 2, 3, 11, 13, 14, 16, 78, 238, 240, 241, 271, 274, 275, 629, 643, 646, 649, 654, 688]
td_best_step12 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 99, 94, 92, 92, 93, 87]
td_fsbl_epi12 = [629, 630, 634, 636, 638, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 654, 661, 663, 665, 666, 669, 671, 673, 675, 678, 681, 682, 683, 684, 685, 688, 689, 692, 694, 695, 698, 699]
td_fsbl_step12 = [99, 100, 100, 101, 99, 99, 96, 96, 94, 97, 97, 92, 98, 92, 95, 93, 95, 93, 94, 93, 92, 90, 90, 91, 93, 92, 90, 97, 102, 90, 87, 94, 96, 90, 99, 95, 104]

pure_best_epi12 = [0, 2, 4, 14, 28, 34, 52, 53, 54, 75, 76, 78, 79, 125, 128, 133, 136, 140, 145, 147, 151, 164, 165, 167, 168, 174, 181, 182, 191, 201, 306, 312, 320, 327, 332, 336, 339, 345, 402, 409, 437, 541, 552, 654, 656, 681]
pure_best_step12 = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 79, 76, 76, 74, 74, 73, 74, 74, 73, 73, 73, 71, 71, 71, 71, 71, 71, 71, 70]
pure_fsbl_epi12 = [182, 188, 190, 191, 196, 201, 202, 205, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 287, 288, 291, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 697, 698]
pure_fsbl_step12 = [79, 161, 102, 76, 80, 76, 80, 78, 85, 89, 90, 91, 88, 98, 95, 98, 91, 92, 89, 92, 94, 92, 93, 90, 94, 89, 95, 97, 96, 95, 101, 101, 92, 92, 98, 100, 89, 86, 87, 88, 83, 81, 83, 83, 81, 80, 79, 79, 79, 80, 79, 81, 79, 77, 78, 77, 75, 74, 79, 78, 75, 75, 77, 74, 73, 74, 104, 79, 77, 74, 74, 75, 76, 79, 74, 76, 75, 78, 77, 76, 73, 75, 74, 74, 74, 73, 75, 74, 75, 106, 114, 75, 74, 74, 72, 72, 73, 73, 73, 73, 74, 73, 75, 73, 74, 73, 73, 73, 74, 73, 73, 73, 73, 74, 72, 75, 74, 74, 75, 75, 76, 75, 73, 75, 75, 73, 74, 73, 75, 73, 73, 75, 78, 74, 75, 74, 73, 73, 74, 73, 74, 74, 74, 75, 76, 73, 73, 73, 75, 74, 104, 72, 73, 72, 73, 73, 72, 72, 103, 93, 75, 73, 71, 72, 72, 73, 72, 71, 74, 71, 72, 72, 73, 74, 78, 73, 72, 72, 72, 74, 72, 73, 72, 72, 72, 72, 73, 72, 71, 71, 72, 73, 72, 73, 138, 72, 71, 72, 71, 73, 72, 71, 72, 73, 72, 73, 79, 72, 72, 73, 77, 76, 74, 73, 73, 79, 74, 77, 76, 77, 79, 77, 79, 77, 75, 76, 76, 77, 74, 77, 74, 75, 75, 74, 76, 75, 77, 74, 76, 75, 75, 74, 76, 76, 76, 75, 78, 78, 75, 76, 75, 76, 74, 77, 75, 75, 76, 75, 75, 74, 74, 73, 73, 80, 74, 76, 78, 73, 74, 74, 73, 74, 74, 78, 75, 82, 74, 75, 74, 74, 74, 79, 80, 76, 79, 81, 94, 76, 83, 77, 106, 81, 79, 81, 91, 84, 75, 77, 73, 89, 71, 71, 72, 71, 72, 72, 72, 72, 72, 71, 73, 71, 70, 72, 72, 72, 73, 71, 77, 76, 76, 71, 71, 72, 71, 75, 72, 72, 74, 71, 76, 73, 72, 76, 74, 72, 75, 74, 73, 76, 91, 75, 75, 81, 75, 78, 75, 79, 89, 76, 85, 79, 71, 71, 72, 72, 71, 71, 71, 71, 72, 72, 71, 72, 72, 72, 73, 71, 72, 71, 73, 71, 73, 71, 71, 72, 73, 72, 71, 72, 72, 72, 71, 71, 72, 72, 71, 71, 72, 71, 71, 72, 71, 72, 71, 71, 73, 72, 72, 72, 71, 72, 73, 72, 75, 73, 73, 73, 73, 71, 72, 73, 72, 71, 72, 71, 72, 71, 75, 73, 73, 72, 75, 73, 73, 72, 73, 72, 73, 74, 72, 73, 72, 72, 72, 74, 71, 73, 70, 72, 75, 74, 73, 72, 72, 72, 73, 72, 72, 72, 71, 73]
plt.plot(best_epi12, best_step12, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF')
plt.plot(td_best_epi12, td_best_step12, color='lightgreen', linewidth=2, linestyle='-', label='TD3_APF')
plt.plot(pure_best_epi12, pure_best_step12, color='gainsboro', linewidth=2, linestyle='-', label='pure DDPG')
plt.legend(loc='upper right', prop={'size':6})
plt.xlim(left=0)
title1 = 'Instance(12) best solution'
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + '[4,4,2] best solution' + '.png'
plt.savefig(fig_path)
plt.close()
#plt.plot([126,699], [126,126], color='mediumslateblue', linewidth=1, label='traditional APF')
plt.plot(fsbl_epi12, fsbl_step12, color='coral', linewidth=1, label='DDPG_APF')
plt.plot(td_fsbl_epi12, td_fsbl_step12, color='limegreen', linewidth=1, label='TD3_APF')
plt.plot(pure_fsbl_epi12, pure_fsbl_step12, color='darkgray', linewidth=1, label='pure DDPG')
plt.legend(loc='upper right', prop={'size':8})
plt.xlim(left=0)
title11 = 'Instance(12) feasible solutions'
plt.title(title11)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + '[4,4,2] feasible solution' + '.png'
plt.savefig(fig_path)
plt.close()
num_fsbl12 = len(fsbl_epi12)
t_num_fsbl12 = len(td_fsbl_epi12)
p_num_fsbl12 = len(pure_fsbl_epi12)





#-----------------------------------------------------------------------------------------------------------------------

new_epi = []
new_step = []


for e in range(700):
    count = 0
    average_step = 0
    for epi in range(len(best_epi1)):
        if best_epi1[epi] == e:
            count += 1
            average_step += best_step1[epi]
    for epi in range(len(best_epi2)):
        if best_epi2[epi] == e:
            count += 1
            average_step += best_step2[epi]
    for epi in range(len(best_epi3)):
        if best_epi3[epi] == e:
            count += 1
            average_step += best_step3[epi]
    for epi in range(len(best_epi4)):
        if best_epi4[epi] == e:
            count += 1
            average_step += best_step4[epi]
    for epi in range(len(best_epi5)):
        if best_epi5[epi] == e:
            count += 1
            average_step += best_step5[epi]
    for epi in range(len(best_epi6)):
        if best_epi6[epi] == e:
            count += 1
            average_step += best_step6[epi]
    for epi in range(len(best_epi7)):
        if best_epi7[epi] == e:
            count += 1
            average_step += best_step7[epi]
    for epi in range(len(best_epi8)):
        if best_epi8[epi] == e:
            count += 1
            average_step += best_step8[epi]
    for epi in range(len(best_epi9)):
        if best_epi9[epi] == e:
            count += 1
            average_step += best_step9[epi]
    for epi in range(len(best_epi10)):
        if best_epi10[epi] == e:
            count += 1
            average_step += best_step10[epi]
    for epi in range(len(best_epi11)):
        if best_epi11[epi] == e:
            count += 1
            average_step += best_step11[epi]
    for epi in range(len(best_epi12)):
        if best_epi12[epi] == e:
            count += 1
            average_step += best_step12[epi]

    #print('count:', count)
    if count > 0:
        average_step = average_step / count
        new_episode = e
        new_epi.append(new_episode)
        new_step.append(average_step)


#DDPG的best
plt.plot(new_epi, new_step, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF')
title1 = 'Average best solution'
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + 'average best solution DDPG' + '.png'
plt.savefig(fig_path)
plt.close()
#平滑后
ddpg_apf_step = []
for i in range(len(new_epi)):
    if i == 0 or i == 1 or i == 2 or i==3:
        s = new_step[i]
        ddpg_apf_step.append(s)
    if i > 3 and i < len(new_epi)-4:
        s = (new_step[i-4]+new_step[i-3]+new_step[i-2]+new_step[i-1]+new_step[i]+new_step[i+1]+new_step[i+2]+new_step[i+3]+new_step[i+4])/9
        ddpg_apf_step.append(s)
    if i == len(new_epi)-1 or i == len(new_epi)-2 or i == len(new_epi)-3 or i == len(new_epi)-4:
        s = (new_step[i-1] + new_step[i])/2
        ddpg_apf_step.append(s)
plt.plot(new_epi, ddpg_apf_step, color='salmon', linewidth=2, linestyle='-')
title1 = 'Average best solution'
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + 'average best solution DDPG_smooth' + '.png'
plt.savefig(fig_path)
plt.close()


#TD3的best

td_new_epi = []
td_new_step = []

for e in range(700):
    count = 0
    average_step = 0
    for epi in range(len(td_best_epi1)):
        if td_best_epi1[epi] == e:
            count += 1
            average_step += td_best_step1[epi]
    for epi in range(len(td_best_epi2)):
        if td_best_epi2[epi] == e:
            count += 1
            average_step += td_best_step2[epi]
    for epi in range(len(td_best_epi3)):
        if td_best_epi3[epi] == e:
            count += 1
            average_step += td_best_step3[epi]
    for epi in range(len(td_best_epi4)):
        if td_best_epi4[epi] == e:
            count += 1
            average_step += td_best_step4[epi]
    for epi in range(len(td_best_epi5)):
        if td_best_epi5[epi] == e:
            count += 1
            average_step += td_best_step5[epi]
    for epi in range(len(td_best_epi6)):
        if td_best_epi6[epi] == e:
            count += 1
            average_step += td_best_step6[epi]
    for epi in range(len(td_best_epi7)):
        if td_best_epi7[epi] == e:
            count += 1
            average_step += td_best_step7[epi]
    for epi in range(len(td_best_epi8)):
        if td_best_epi8[epi] == e:
            count += 1
            average_step += td_best_step8[epi]
    for epi in range(len(td_best_epi9)):
        if td_best_epi9[epi] == e:
            count += 1
            average_step += td_best_step9[epi]
    for epi in range(len(td_best_epi10)):
        if td_best_epi10[epi] == e:
            count += 1
            average_step += td_best_step10[epi]
    for epi in range(len(td_best_epi11)):
        if td_best_epi11[epi] == e:
            count += 1
            average_step += td_best_step11[epi]
    for epi in range(len(td_best_epi12)):
        if td_best_epi12[epi] == e:
            count += 1
            average_step += td_best_step12[epi]

    #print('count:', count)
    if count > 0:
        average_step = average_step / count
        new_episode = e
        td_new_epi.append(new_episode)
        td_new_step.append(average_step)

plt.plot(td_new_epi, td_new_step,color='limegreen', linewidth=2, linestyle='-', label='TD3_APF')
title1 = 'Average best solution'
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + 'average best solution TD3' + '.png'
plt.savefig(fig_path)
plt.close()

#pure DDPG的best
pure_new_epi = []
pure_new_step = []

for e in range(700):
    count = 0
    average_step = 0
    for epi in range(len(pure_best_epi1)):
        if pure_best_epi1[epi] == e:
            count += 1
            average_step += pure_best_step1[epi]
    for epi in range(len(pure_best_epi2)):
        if pure_best_epi2[epi] == e:
            count += 1
            average_step += pure_best_step2[epi]
    for epi in range(len(pure_best_epi3)):
        if pure_best_epi3[epi] == e:
            count += 1
            average_step += pure_best_step3[epi]
    for epi in range(len(pure_best_epi4)):
        if pure_best_epi4[epi] == e:
            count += 1
            average_step += pure_best_step4[epi]
    for epi in range(len(pure_best_epi5)):
        if pure_best_epi5[epi] == e:
            count += 1
            average_step += pure_best_step5[epi]
    for epi in range(len(pure_best_epi6)):
        if pure_best_epi6[epi] == e:
            count += 1
            average_step += pure_best_step6[epi]
    for epi in range(len(pure_best_epi7)):
        if pure_best_epi7[epi] == e:
            count += 1
            average_step += pure_best_step7[epi]
    for epi in range(len(pure_best_epi8)):
        if pure_best_epi8[epi] == e:
            count += 1
            average_step += pure_best_step8[epi]
    for epi in range(len(pure_best_epi9)):
        if pure_best_epi9[epi] == e:
            count += 1
            average_step += pure_best_step9[epi]
    for epi in range(len(pure_best_epi10)):
        if pure_best_epi10[epi] == e:
            count += 1
            average_step += pure_best_step10[epi]
    for epi in range(len(pure_best_epi11)):
        if pure_best_epi11[epi] == e:
            count += 1
            average_step += pure_best_step11[epi]
    for epi in range(len(pure_best_epi12)):
        if pure_best_epi12[epi] == e:
            count += 1
            average_step += pure_best_step12[epi]

    #print('count:', count)
    if count > 0:
        average_step = average_step / count
        new_episode = e
        pure_new_epi.append(new_episode)
        pure_new_step.append(average_step)

plt.plot(pure_new_epi, pure_new_step,color='gray', linewidth=2, linestyle='-', label='pure_DDPG')
title1 = 'Average best solution'
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + 'average best solution pure DDPG' + '.png'
plt.savefig(fig_path)
plt.close()


#---------------------------------------------比较best
ddpg_apf_step = []
for i in range(len(new_epi)):
    if i == 0 or i == 1 or i == 2:
        s = new_step[i]
        ddpg_apf_step.append(s)
    if i > 2 and i < len(new_epi)-3:
        s = (new_step[i-3]+new_step[i-2]+new_step[i-1]+new_step[i]+new_step[i+1]+new_step[i+2]+new_step[i+3])/7
        ddpg_apf_step.append(s)
    if i == len(new_epi)-1 or i == len(new_epi)-2 or i == len(new_epi)-3:
        s = new_step[i]
        ddpg_apf_step.append(s)
plt.plot(new_epi, ddpg_apf_step, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF')
td3_apf_step = []
for i in range(len(td_new_epi)):
    if i == 0 or i == 1 or i == 2:
        s = td_new_step[i]
        td3_apf_step.append(s)
    if i > 2 and i < len(td_new_epi)-3:
        s = (td_new_step[i-3]+td_new_step[i-2]+td_new_step[i-1]+td_new_step[i]+td_new_step[i+1]+td_new_step[i+2]+td_new_step[i+3])/7
        td3_apf_step.append(s)
    if i == len(td_new_epi)-1 or i == len(td_new_epi)-2 or i == len(td_new_epi)-3:
        s = td_new_step[i]
        td3_apf_step.append(s)
plt.plot(td_new_epi, td3_apf_step,color='limegreen', linewidth=0.9, linestyle='-', label='TD3_APF')
pure_step = []
for i in range(len(pure_new_epi)):
    if i == 0 or i == 1 or i == 2:
        s = pure_new_step[i]
        pure_step.append(s)
    if i > 2 and i < len(pure_new_epi)-3:
        s = (pure_new_step[i-3]+pure_new_step[i-2]+pure_new_step[i-1]+pure_new_step[i]+pure_new_step[i+1]+pure_new_step[i+2]+pure_new_step[i+3])/7
        pure_step.append(s)
    if i == len(pure_new_epi)-1 or i == len(pure_new_epi)-2 or i == len(pure_new_epi)-3:
        s = pure_new_step[i]
        pure_step.append(s)
plt.plot(pure_new_epi, pure_step,color='gray', linewidth=1.3, linestyle='-', label='pure_DDPG')
title1 = 'Average best solution'
plt.legend(loc='upper right', prop={'size':8})
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + 'average best solution---smooth' + '.png'
plt.savefig(fig_path)
plt.close()


#--------------------------------比较best——————smoother
ddpg_apf_step = []
for i in range(len(new_epi)):
    if i == 0 or i == 1 or i == 2 or i == 3:
        s = new_step[i]
        ddpg_apf_step.append(s)
    if i > 3 and i < len(new_epi)-4:
        s = (new_step[i-4]+new_step[i-3]+new_step[i-2]+new_step[i-1]+new_step[i]+new_step[i+1]+new_step[i+2]+new_step[i+3]+new_step[i+4])/9
        ddpg_apf_step.append(s)
    if i == len(new_epi)-1 or i == len(new_epi)-2 or i == len(new_epi)-3 or i == len(new_epi)-4:
        s = (new_step[i-1]+new_step[i])/2
        ddpg_apf_step.append(s)
plt.plot(new_epi, ddpg_apf_step, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF')


td3_apf_step = []
for i in range(len(td_new_epi)):
    if i == 0 or i == 1 or i == 2 or i == 3:
        s = td_new_step[i]
        td3_apf_step.append(s)
    if i > 3 and i < len(td_new_epi)-4:
        s = (td_new_step[i-4]+td_new_step[i-3]+td_new_step[i-2]+td_new_step[i-1]+td_new_step[i]+td_new_step[i+1]+td_new_step[i+2]+td_new_step[i+3]+td_new_step[i+4])/9
        td3_apf_step.append(s)
    if i == len(td_new_epi)-1 or i == len(td_new_epi)-2 or i == len(td_new_epi)-3 or i == len(td_new_epi)-3 or i == len(td_new_epi)-4:
        s = (td_new_step[i-1]+td_new_step[i])/2
        td3_apf_step.append(s)
plt.plot(td_new_epi, td3_apf_step,color='limegreen', linewidth=0.9, linestyle='-', label='TD3_APF')

pure_step = []
for i in range(len(pure_new_epi)):
    if i == 0 or i == 1 or i == 2 or i == 3:
        s = pure_new_step[i]
        pure_step.append(s)
    if i > 3 and i < len(pure_new_epi)-4:
        s = (pure_new_step[i-4]+pure_new_step[i-3]+pure_new_step[i-2]+pure_new_step[i-1]+pure_new_step[i]+pure_new_step[i+1]+pure_new_step[i+2]+pure_new_step[i+3]+pure_new_step[i+4])/9
        pure_step.append(s)
    if i == len(pure_new_epi)-1 or i == len(pure_new_epi)-2 or i == len(pure_new_epi)-3 or i == len(pure_new_epi)-4:
        s = (pure_new_step[i-1]+pure_new_step[i])/2
        pure_step.append(s)
plt.plot(pure_new_epi, pure_step,color='gray', linewidth=1.3, linestyle='-', label='pure_DDPG')
title1 = 'Average best solution'
plt.legend(loc='upper right', prop={'size':8})
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + 'average best solution---smooth_2' + '.png'
plt.savefig(fig_path)
plt.close()


#--------------------------------------------比较feasible

new_f_epi = []
new_f_step = []

for e in range(700):
    count = 0
    average_step = 0
    for epi in range(len(fsbl_epi1)):
        if fsbl_epi1[epi] == e:
            count += 1
            average_step += fsbl_step1[epi]
    for epi in range(len(fsbl_epi2)):
        if fsbl_epi2[epi] == e:
            count += 1
            average_step += fsbl_step2[epi]
    for epi in range(len(fsbl_epi3)):
        if fsbl_epi3[epi] == e:
            count += 1
            average_step += fsbl_step3[epi]
    for epi in range(len(fsbl_epi4)):
        if fsbl_epi4[epi] == e:
            count += 1
            average_step += fsbl_step4[epi]
    for epi in range(len(fsbl_epi5)):
        if fsbl_epi5[epi] == e:
            count += 1
            average_step += fsbl_step5[epi]
    for epi in range(len(fsbl_epi6)):
        if fsbl_epi6[epi] == e:
            count += 1
            average_step += fsbl_step6[epi]
    for epi in range(len(fsbl_epi7)):
        if fsbl_epi7[epi] == e:
            count += 1
            average_step += fsbl_step7[epi]
    for epi in range(len(fsbl_epi8)):
        if fsbl_epi8[epi] == e:
            count += 1
            average_step += fsbl_step8[epi]
    for epi in range(len(fsbl_epi9)):
        if fsbl_epi9[epi] == e:
            count += 1
            average_step += fsbl_step9[epi]
    for epi in range(len(fsbl_epi10)):
        if fsbl_epi10[epi] == e:
            count += 1
            average_step += fsbl_step10[epi]
    for epi in range(len(fsbl_epi11)):
        if fsbl_epi11[epi] == e:
            count += 1
            average_step += fsbl_step11[epi]
    for epi in range(len(fsbl_epi12)):
        if fsbl_epi12[epi] == e:
            count += 1
            average_step += fsbl_step12[epi]

    #print('count:', count)
    if count > 0:
        average_step = average_step / count
        new_episode = e
        new_f_epi.append(new_episode)
        new_f_step.append(average_step)

plt.plot(new_f_epi, new_f_step, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF')
title1 = 'Average feasible solution'
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + 'average feasible solution DDPG' + '.png'
plt.savefig(fig_path)
plt.close()


td_new_f_epi = []
td_new_f_step = []

for e in range(700):
    count = 0
    average_step = 0
    for epi in range(len(td_fsbl_epi1)):
        if td_fsbl_epi1[epi] == e:
            count += 1
            average_step += td_fsbl_step1[epi]
    for epi in range(len(td_best_epi2)):
        if td_fsbl_epi2[epi] == e:
            count += 1
            average_step += td_fsbl_step2[epi]
    for epi in range(len(td_fsbl_epi3)):
        if td_fsbl_epi3[epi] == e:
            count += 1
            average_step += td_fsbl_step3[epi]
    for epi in range(len(td_fsbl_epi4)):
        if td_fsbl_epi4[epi] == e:
            count += 1
            average_step += td_fsbl_step4[epi]
    for epi in range(len(td_fsbl_epi5)):
        if td_fsbl_epi5[epi] == e:
            count += 1
            average_step += td_fsbl_step5[epi]
    for epi in range(len(td_fsbl_epi6)):
        if td_fsbl_epi6[epi] == e:
            count += 1
            average_step += td_fsbl_step6[epi]
    for epi in range(len(td_fsbl_epi7)):
        if td_fsbl_epi7[epi] == e:
            count += 1
            average_step += td_fsbl_step7[epi]
    for epi in range(len(td_fsbl_epi8)):
        if td_fsbl_epi8[epi] == e:
            count += 1
            average_step += td_fsbl_step8[epi]
    for epi in range(len(td_fsbl_epi9)):
        if td_fsbl_epi9[epi] == e:
            count += 1
            average_step += td_fsbl_step9[epi]
    for epi in range(len(td_fsbl_epi10)):
        if td_fsbl_epi10[epi] == e:
            count += 1
            average_step += td_fsbl_step10[epi]
    for epi in range(len(td_fsbl_epi11)):
        if td_fsbl_epi11[epi] == e:
            count += 1
            average_step += td_fsbl_step11[epi]
    for epi in range(len(td_fsbl_epi12)):
        if td_fsbl_epi12[epi] == e:
            count += 1
            average_step += td_fsbl_step12[epi]

    #print('count:', count)
    if count > 0:
        average_step = average_step / count
        new_episode = e
        td_new_f_epi.append(new_episode)
        td_new_f_step.append(average_step)

plt.plot(td_new_f_epi, td_new_f_step,color='limegreen', linewidth=2, linestyle='-', label='TD3_APF')
title1 = 'Average feasible solution'
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + 'average feasible solution TD3' + '.png'
plt.savefig(fig_path)
plt.close()


pure_new_f_epi = []
pure_new_f_step = []

for e in range(700):
    count = 0
    average_step = 0
    for epi in range(len(pure_fsbl_epi1)):
        if pure_fsbl_epi1[epi] == e:
            count += 1
            average_step += pure_fsbl_step1[epi]
    for epi in range(len(pure_fsbl_epi2)):
        if pure_fsbl_epi2[epi] == e:
            count += 1
            average_step += pure_fsbl_step2[epi]
    for epi in range(len(pure_fsbl_epi3)):
        if pure_fsbl_epi3[epi] == e:
            count += 1
            average_step += pure_fsbl_step3[epi]
    for epi in range(len(pure_fsbl_epi4)):
        if pure_fsbl_epi4[epi] == e:
            count += 1
            average_step += pure_fsbl_step4[epi]
    for epi in range(len(pure_fsbl_epi5)):
        if pure_fsbl_epi5[epi] == e:
            count += 1
            average_step += pure_fsbl_step5[epi]
    for epi in range(len(pure_fsbl_epi6)):
        if pure_fsbl_epi6[epi] == e:
            count += 1
            average_step += pure_fsbl_step6[epi]
    for epi in range(len(pure_fsbl_epi7)):
        if pure_fsbl_epi7[epi] == e:
            count += 1
            average_step += pure_fsbl_step7[epi]
    for epi in range(len(pure_fsbl_epi8)):
        if pure_fsbl_epi8[epi] == e:
            count += 1
            average_step += pure_fsbl_step8[epi]
    for epi in range(len(pure_fsbl_epi9)):
        if pure_fsbl_epi9[epi] == e:
            count += 1
            average_step += pure_fsbl_step9[epi]
    for epi in range(len(pure_fsbl_epi10)):
        if pure_fsbl_epi10[epi] == e:
            count += 1
            average_step += pure_fsbl_step10[epi]
    for epi in range(len(pure_fsbl_epi11)):
        if pure_fsbl_epi11[epi] == e:
            count += 1
            average_step += pure_fsbl_step11[epi]
    for epi in range(len(pure_fsbl_epi12)):
        if pure_fsbl_epi12[epi] == e:
            count += 1
            average_step += pure_fsbl_step12[epi]

    #print('count:', count)
    if count > 0:
        average_step = average_step / count
        new_episode = e
        pure_new_f_epi.append(new_episode)
        pure_new_f_step.append(average_step)

plt.plot(pure_new_f_epi, pure_new_f_step,color='gray', linewidth=2, linestyle='-', label='pure_DDPG')
title1 = 'Average feasible solution'
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + 'average feasible solution pure_DDPG' + '.png'
plt.savefig(fig_path)
plt.close()


#--------------------------------------比较feasible——————smoother
ddpg_apf_step = []
for i in range(len(new_f_epi)):
    if i == 0 or i == 1:
        s = new_f_step[i]
        ddpg_apf_step.append(s)
    if i > 1 and i < len(new_f_epi)-2:
        s = (new_f_step[i-2]+new_f_step[i-1]+new_f_step[i]+new_f_step[i+1]+new_f_step[i+2])/5
        ddpg_apf_step.append(s)
    if i == len(new_f_epi)-1 or i == len(new_f_epi)-2:
        s = new_f_step[i]
        ddpg_apf_step.append(s)
plt.plot(new_f_epi, ddpg_apf_step, color='salmon', linewidth=2, linestyle='-', label='DDPG_APF')
td3_apf_step = []
for i in range(len(td_new_f_epi)):
    if i == 0 or i == 1:
        s = td_new_f_step[i]
        td3_apf_step.append(s)
    if i > 1 and i < len(td_new_f_epi)-2:
        s = (td_new_f_step[i-2]+td_new_f_step[i-1]+td_new_f_step[i]+td_new_f_step[i+1]+td_new_f_step[i+2])/5
        td3_apf_step.append(s)
    if i == len(td_new_f_epi)-1 or i == len(td_new_f_epi)-2:
        s = td_new_f_step[i]
        td3_apf_step.append(s)
plt.plot(td_new_f_epi, td3_apf_step,color='limegreen', linewidth=0.9, linestyle='-', label='TD3_APF')
pure_step = []
for i in range(len(pure_new_f_epi)):
    if i == 0 or i == 1:
        s = pure_new_f_step[i]
        pure_step.append(s)
    if i > 1 and i < len(pure_new_f_epi)-2:
        s = (pure_new_f_step[i-2]+pure_new_f_step[i-1]+pure_new_f_step[i]+pure_new_f_step[i+1]+pure_new_f_step[i+2])/5
        pure_step.append(s)
    if i == len(pure_new_f_epi)-1 or i == len(pure_new_f_epi)-2:
        s = pure_new_f_step[i]
        pure_step.append(s)
plt.plot(pure_new_f_epi, pure_step,color='gray', linewidth=1.3, linestyle='-', label='pure_DDPG')
title1 = 'Average feasible solution'
plt.legend(loc='upper right', prop={'size':8})
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + 'average feasible solution_smoother' + '.png'
plt.savefig(fig_path)
plt.close()

#========================================比较feasible——————less smooth
ddpg_apf_step = []
for i in range(len(new_f_epi)):
    if i == 0:
        s = new_f_step[i]
        ddpg_apf_step.append(s)
    if i > 0:
        s = (new_f_step[i-1]+new_f_step[i])/2
        ddpg_apf_step.append(s)
plt.plot(new_f_epi, ddpg_apf_step, color='salmon', linewidth=1, linestyle='-', label='DDPG_APF')
td3_apf_step = []
for i in range(len(td_new_f_epi)):
    if i == 0:
        s = td_new_f_step[i]
        td3_apf_step.append(s)
    if i > 0:
        s = (td_new_f_step[i-1]+td_new_f_step[i])/2
        td3_apf_step.append(s)
plt.plot(td_new_f_epi, td3_apf_step,color='limegreen', linewidth=0.6, linestyle='-', label='TD3_APF')
pure_step = []
for i in range(len(pure_new_f_epi)):
    if i == 0:
        s = pure_new_f_step[i]
        pure_step.append(s)
    if i > 0:
        s = (pure_new_f_step[i-1]+pure_new_f_step[i])/2
        pure_step.append(s)
plt.plot(pure_new_f_epi, pure_step,color='gray', linewidth=0.8, linestyle='-', label='pure_DDPG')
title1 = 'Average feasible solution'
plt.legend(loc='upper right', prop={'size':8})
plt.title(title1)
plt.xlabel('Episodes')
plt.ylabel('Number of steps of the solution')
fig_path = 'result/' + 'average feasible solution---smooth_1' + '.png'
plt.savefig(fig_path)
plt.close()




#------------------------------------------------------------ number of feasible solutions
instances = ['(1)','(2)','(3)','(4)','(5)','(6)','(7)','(8)','(9)','(10)','(11)','(12)']

x = np.arange(len(instances))
width = 0.2
d = x
p = x + width
t = x + 2*width
apf = x - width

solution_num_d = [num_fsbl1, num_fsbl12, num_fsbl2, num_fsbl9, num_fsbl3, num_fsbl7, num_fsbl6, num_fsbl8, num_fsbl11, num_fsbl10, num_fsbl5, num_fsbl4]
solution_num_t = [t_num_fsbl1, t_num_fsbl12, t_num_fsbl2, t_num_fsbl9, t_num_fsbl3, t_num_fsbl7, t_num_fsbl6, t_num_fsbl8, t_num_fsbl11, t_num_fsbl10, t_num_fsbl5, t_num_fsbl4]
solution_num_p = [p_num_fsbl1, p_num_fsbl12, p_num_fsbl2, p_num_fsbl9, p_num_fsbl3, p_num_fsbl7, p_num_fsbl6, p_num_fsbl8, p_num_fsbl11, p_num_fsbl10, p_num_fsbl5, p_num_fsbl4]
plt.bar(d, solution_num_d, width=width, color='crimson', label='DDPG_APF')
plt.bar(t, solution_num_t, width=width, color='lightseagreen', label='TD3_APF')
plt.bar(p, solution_num_p, width=width, color='darkgray', label='pure_DDPG')
plt.xticks(x+width, labels=instances)
for i in range(len(instances)):
    plt.text(d[i], solution_num_d[i], solution_num_d[i], va="bottom", ha="center", fontsize=6)
    plt.text(t[i], solution_num_t[i], solution_num_t[i], va="bottom", ha="center", fontsize=6)
    plt.text(p[i], solution_num_p[i], solution_num_p[i], va="bottom", ha="center", fontsize=6)
plt.legend(loc='upper right', prop={'size':8})
title1 = 'Number of feasible solutions'
plt.title(title1)
plt.xlabel('Instance')
plt.ylabel('Solution numbers')
fig_path = 'result/' + 'feasible solution amount' + '.png'
plt.savefig(fig_path)
plt.close()

#---------------------------------------------------------------重新排序
solution_num_d = [num_fsbl1, num_fsbl2, num_fsbl9, num_fsbl10, num_fsbl7, num_fsbl12, num_fsbl8, num_fsbl3, num_fsbl4, num_fsbl5, num_fsbl6, num_fsbl11]
solution_num_t = [t_num_fsbl1, t_num_fsbl2, t_num_fsbl9, t_num_fsbl10, t_num_fsbl7, t_num_fsbl12, t_num_fsbl8, t_num_fsbl3, t_num_fsbl4, t_num_fsbl5, t_num_fsbl6, t_num_fsbl11]
solution_num_p = [p_num_fsbl1, p_num_fsbl2, p_num_fsbl9, p_num_fsbl10, p_num_fsbl7, p_num_fsbl12, p_num_fsbl8, p_num_fsbl3, p_num_fsbl4, p_num_fsbl5, p_num_fsbl6, p_num_fsbl11]
plt.bar(d, solution_num_d, width=width, color='crimson', label='DDPG_APF')
plt.bar(t, solution_num_t, width=width, color='lightseagreen', label='TD3_APF')
plt.bar(p, solution_num_p, width=width, color='darkgray', label='pure_DDPG')
plt.xticks(x+width, labels=instances)
for i in range(len(instances)):
    plt.text(d[i], solution_num_d[i], solution_num_d[i], va="bottom", ha="center", fontsize=6)
    plt.text(t[i], solution_num_t[i], solution_num_t[i], va="bottom", ha="center", fontsize=6)
    plt.text(p[i], solution_num_p[i], solution_num_p[i], va="bottom", ha="center", fontsize=6)
plt.legend(loc='upper right', prop={'size':8})
title1 = 'Number of feasible solutions'
plt.title(title1)
plt.xlabel('instance')
plt.ylabel('solution numbers')
fig_path = 'result/' + 'feasible solution amount_1' + '.png'
plt.savefig(fig_path)
plt.close()





#-----------------------------------------------------------------例子
plt.plot(best_epi1, best_step1, color='mediumorchid', linewidth=1, linestyle='-', label='simple task')
plt.plot(best_epi6, best_step6, color='orange', linewidth=1, linestyle='-', label='complex task')
title1 = 'Number of steps in best solutions'
plt.legend(loc='upper right', prop={'size':8})
plt.title(title1)
plt.xlabel('episode')
plt.ylabel('steps')
fig_path = 'result/' + 'best solution simple_complex' + '.png'
plt.savefig(fig_path)
plt.close()


#-----------------------------------------------例子， 平滑
f_news = []
for i in range(len(fsbl_epi9)):
    if i == 0:
        s = fsbl_step9[i]
        f_news.append(s)
    if i > 0:
        s = (fsbl_step9[i-1]+fsbl_step9[i])/2
        f_news.append(s)
f_newc = []
for i in range(len(fsbl_epi3)):
    if i == 0:
        s = fsbl_step3[i]
        f_newc.append(s)
    if i > 0:
        s = (fsbl_step3[i-1]+fsbl_step3[i])/2
        f_newc.append(s)
plt.plot(fsbl_epi9, f_news, color='mediumorchid', linewidth=1, linestyle='-', label='simple task')
plt.plot(fsbl_epi3, f_newc, color='orange', linewidth=1, linestyle='-', label='complex task')
title1 = 'Number of steps in feasible solutions'
plt.legend(loc='upper right', prop={'size':8})
plt.title(title1)
plt.xlabel('episode')
plt.ylabel('steps')
fig_path = 'result/' + 'feasible solution simple_complex' + '.png'
plt.savefig(fig_path)
plt.close()
